<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Thinking and Writing a Software!]]></title>
  <link href="http://cubicdaiya.github.com/blog/en/atom.xml" rel="self"/>
  <link href="http://cubicdaiya.github.com/blog/en/"/>
  <updated>2012-07-06T00:33:05+09:00</updated>
  <id>http://cubicdaiya.github.com/blog/en/</id>
  <author>
    <name><![CDATA[Tatsuhiko Kubo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[exercise for programmers]]></title>
    <link href="http://cubicdaiya.github.com/blog/en/blog/2012/07/05/implement-simple-algoritms/"/>
    <updated>2012-07-05T23:25:00+09:00</updated>
    <id>http://cubicdaiya.github.com/blog/en/blog/2012/07/05/implement-simple-algoritms</id>
    <content type="html"><![CDATA[<p>I think that day-to-day programming makes programmers improved technically.
But as time went on, programmers get to avoid programming. Especially more they belong to same organization&#8230;</p>

<h3>Why?</h3>

<p>Though depending on a company, a programmer might become a manager with age. This is one of the reasons for it.
But a programmer might get to avoid programming even if they are not.</p>

<p>Someone said following(If I&#8217;m not mistaken Brooks wrote the similar thing in &#8216;The Mythical Man-Month&#8217;)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>the best way to make no bug is non-programming.</span></code></pre></td></tr></table></div></figure>


<p>Programmers must work out something quickly at work. So programmers reutilize written codes in old days if there are already necessary codes.
If there are( or was) superior programmers in your company, their codes would be useful in-house software library.</p>

<p>Even if in-house library is useful or not, programmers will work out with it. Because it is quicker than re-implementing from now.
Of course, re-implementing might be more appropriate than using an existing library. But it is a rare case.</p>

<p>If that happens, programmers get to write programs like building lego-blocks.
So-called lego-block-programming makes productivity of programmers improved. It&#8217;s wonderful!
But as they would do only easy works, their tecnical skills would be break down.
Furthermore, a lot of programmers get to think that someone else do difficult things.
This is not a serious problem. However it is a serious problem that they get less able to solve technically-complicated problems.</p>

<h3>What I&#8217;m practicing</h3>

<p>I will say previous term again. I think that day-to-day programming makes programmers improved technically.
So I&#8217;m programming day-to-day. But you might not have themes of programming at all times.
In that case, you may implement primary data structures and algorithms.(I often implement them in my favorite languages)</p>

<p>They are stack, queue, heap, binary-search, and so on.
Of course their implements are not superior to exsiting libraries.
But programmers will grow up by day-to-day programming even if they are re-implements.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ngx_small_light]]></title>
    <link href="http://cubicdaiya.github.com/blog/en/blog/2012/07/04/ngx-small-light/"/>
    <updated>2012-07-04T10:07:00+09:00</updated>
    <id>http://cubicdaiya.github.com/blog/en/blog/2012/07/04/ngx-small-light</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/cubicdaiya/ngx_small_light">https://github.com/cubicdaiya/ngx_small_light</a></p>

<p>I developed <a href="https://github.com/cubicdaiya/ngx_small_light">ngx_small_light</a>.
This is a dynamic image transration module for <a href="http://nginx.org/">Nginx</a> and is the port of <a href="http://code.google.com/p/smalllight/">mod_small_light</a>.
<a href="https://github.com/cubicdaiya/ngx_small_light">ngx_small_light</a> is written for using as the same way as <a href="http://code.google.com/p/smalllight/">mod_small_light</a>
as possible in Nginx.(<a href="http://code.google.com/p/smalllight/">mod_small_light</a> is a Apache module).</p>

<h3>Reason I developed ngx_small_light</h3>

<p>I have been operating the customed <a href="http://code.google.com/p/smalllight/">mod_small_light</a> at work.</p>

<p>When I completed the work of customizing <a href="http://code.google.com/p/smalllight/">mod_small_light</a> at work, My workmate said to me,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Why don't you do it with Nginx?</span></code></pre></td></tr></table></div></figure>


<p>My worksite is a heavy user of Nginx. But we use Apache also. <a href="http://code.google.com/p/smalllight/">mod_small_light</a> has most features we require
and what we have to do with customization of mod_small_light is only adding the few special functions.</p>

<p>As count of Nginx user is increasing in recent years, I thought dynamic image transformation module for Nginx is in demand.
Already Nginx has standard image transformation module as name as HttpImageFilterModule. But HttpImageFilterModule provides little functions and
expects complex configurations.</p>
]]></content>
  </entry>
  
</feed>
