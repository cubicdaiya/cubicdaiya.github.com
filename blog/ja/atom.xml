<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[bokko bokkoにしてやんよ]]></title>
  <link href="http://cubicdaiya.github.com/blog/ja/atom.xml" rel="self"/>
  <link href="http://cubicdaiya.github.com/blog/ja/"/>
  <updated>2012-06-29T01:26:30+09:00</updated>
  <id>http://cubicdaiya.github.com/blog/ja/</id>
  <author>
    <name><![CDATA[Tatsuhiko Kubo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[node-dtl v0.1.0リリース]]></title>
    <link href="http://cubicdaiya.github.com/blog/ja/blog/2012/06/29/xin-siibaziyonfalsenode-dot-jsdenode-dtlgarequiredekinaijian/"/>
    <updated>2012-06-29T01:10:00+09:00</updated>
    <id>http://cubicdaiya.github.com/blog/ja/blog/2012/06/29/xin-siibaziyonfalsenode-dot-jsdenode-dtlgarequiredekinaijian</id>
    <content type="html"><![CDATA[<p>npmに登録してあるnode-dtlをバージョンアップ(v0.0.9 -> v0.1.0)した。</p>

<p>特に機能追加とかしたわけではなくて、どうも比較的最近のNode.jsだとアドオンのビルド済みファイルを置くディレクトリが変更されたせいで
npmでnode-dtlをインストールしても肝心のnode-dtlをrequireできなくなっていたのを直した感じ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gd">--- a/wscript</span>
</span><span class='line'><span class="gi">+++ b/wscript</span>
</span><span class='line'><span class="gu">@@ -32,3 +32,5 @@ def shutdown():</span>
</span><span class='line'>   else:
</span><span class='line'>     if os.path.exists(&#39;build/default/dtl.node&#39;) and not os.path.lexists(&#39;dtl.node&#39;):
</span><span class='line'>       os.symlink(&#39;build/default/dtl.node&#39;, &#39;dtl.node&#39;)
</span><span class='line'><span class="gi">+    if os.path.exists(&#39;build/Release/dtl.node&#39;) and not os.path.lexists(&#39;dtl.node&#39;):</span>
</span><span class='line'><span class="gi">+      os.symlink(&#39;build/Release/dtl.node&#39;, &#39;dtl.node&#39;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>という具合に昔はインストールすると{$package}/build/default/にビルド済みアドオンファイルが配置されていたのに、
いつのまにか{$package}/build/Releaseに配置されるようになっていた。個人的には正直これはどうなのよ？って感じな変更なんだけど、
node-ncursesの作者も同じようなことを思ってるらしく、wscriptには同じような処理と共に僕の今の気持ちを代弁してくれているようなコメントが書かれていた。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">shutdown</span><span class="p">():</span>
</span><span class='line'>  <span class="c"># HACK to get ncurses_addon.node out of build directory.</span>
</span><span class='line'>  <span class="c"># better way to do this?</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">Options</span><span class="o">.</span><span class="n">commands</span><span class="p">[</span><span class="s">&#39;clean&#39;</span><span class="p">]:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">exists</span><span class="p">(</span><span class="s">&#39;ncurses_addon.node&#39;</span><span class="p">):</span> <span class="n">unlink</span><span class="p">(</span><span class="s">&#39;ncurses_addon.node&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">exists</span><span class="p">(</span><span class="s">&#39;build/Release/ncurses_addon.node&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">exists</span><span class="p">(</span><span class="s">&#39;ncurses_addon.node&#39;</span><span class="p">):</span>
</span><span class='line'>      <span class="n">symlink</span><span class="p">(</span><span class="s">&#39;build/Release/ncurses_addon.node&#39;</span><span class="p">,</span> <span class="s">&#39;ncurses_addon.node&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">exists</span><span class="p">(</span><span class="s">&#39;build/default/ncurses_addon.node&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">exists</span><span class="p">(</span><span class="s">&#39;ncurses_addon.node&#39;</span><span class="p">):</span>
</span><span class='line'>      <span class="n">symlink</span><span class="p">(</span><span class="s">&#39;build/default/ncurses_addon.node&#39;</span><span class="p">,</span> <span class="s">&#39;ncurses_addon.node&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>いやホントにさ、もっといい方法ないの？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['Octopressでサイドバーにgithubのリポジトリ一覧が表示されない件']]></title>
    <link href="http://cubicdaiya.github.com/blog/ja/blog/2012/06/20/octopress-not-found-github-repos/"/>
    <updated>2012-06-20T01:12:00+09:00</updated>
    <id>http://cubicdaiya.github.com/blog/ja/blog/2012/06/20/octopress-not-found-github-repos</id>
    <content type="html"><![CDATA[<p>githubの古いAPIが使えなくなったのが原因であっちこっちのOctopressのサイドバーで表示されているgithubのリポジトリ一覧がずっと「Status updating…」になるという問題が発生している模様。
本家にもIssue(<a href="https://github.com/imathis/octopress/issues/620">#620</a>)として上がっていて以下のパッチがGistで提供されている。</p>

<div><script src='https://gist.github.com/2925425.js?file=github.js.diff'></script>
<noscript><pre><code>diff --git a/source/javascripts/github.js b/source/javascripts/github.js
index 678775a..8b79dad 100644
--- a/source/javascripts/github.js
+++ b/source/javascripts/github.js
@@ -10,15 +10,15 @@ var github = (function(){
   return {
     showRepos: function(options){
       $.ajax({
-          url: &quot;http://github.com/api/v2/json/repos/show/&quot;+options.user+&quot;?callback=?&quot;
+          url: &quot;https://api.github.com/users/&quot;+options.user+&quot;/repos?callback=?&quot;
         , type: 'jsonp'
         , error: function (err) { $(options.target + ' li.loading').addClass('error').text(&quot;Error loading feed&quot;); }
         , success: function(data) {
           var repos = [];
-          if (!data || !data.repositories) { return; }
-          for (var i = 0; i &lt; data.repositories.length; i++) {
-            if (options.skip_forks &amp;&amp; data.repositories[i].fork) { continue; }
-            repos.push(data.repositories[i]);
+          if (!data || !data.data) { return; }
+          for (var i = 0; i &lt; data.data.length; i++) {
+            if (options.skip_forks &amp;&amp; data.data[i].fork) { continue; }
+            repos.push(data.data[i]);
           }
           repos.sort(function(a, b) {
             var aDate = new Date(a.pushed_at).valueOf(),</code></pre></noscript></div>


<p>しかし、このパッチだと各リポジトリのリンク先へ飛ぶとJSON(APIのレスポンス)が表示されてしまう。普通は各リポジトリのページへ飛ばしたいはずなのでこうする。(20行目に注目)</p>

<div><script src='https://gist.github.com/2955189.js?file=github.js.patch'></script>
<noscript><pre><code>--- a/source/javascripts/github.js        2012-06-20 01:31:15.536783517 +0900
+++ b/source/javascripts/github.js  2012-06-20 01:23:20.044800861 +0900
@@ -10,15 +10,16 @@
   return {
     showRepos: function(options){
       $.ajax({
-          url: &quot;http://github.com/api/v2/json/repos/show/&quot;+options.user+&quot;?callback=?&quot;
+          url: &quot;https://api.github.com/users/&quot;+options.user+&quot;/repos?callback=?&quot;
         , type: 'jsonp'
         , error: function (err) { $(options.target + ' li.loading').addClass('error').text(&quot;Error loading feed&quot;); }
         , success: function(data) {
           var repos = [];
-          if (!data || !data.repositories) { return; }
-          for (var i = 0; i &lt; data.repositories.length; i++) {
-            if (options.skip_forks &amp;&amp; data.repositories[i].fork) { continue; }
-            repos.push(data.repositories[i]);
+          if (!data || !data.data) { return; }
+          for (var i = 0; i &lt; data.data.length; i++) {
+            if (options.skip_forks &amp;&amp; data.data[i].fork) { continue; }
+            data.data[i].url = data.data[i].svn_url;
+            repos.push(data.data[i]);
           }
           repos.sort(function(a, b) {
             var aDate = new Date(a.pushed_at).valueOf(),
</code></pre></noscript></div>


<p>これで今まで通りOctopressのサイドバーでgithubのリポジトリ一覧を表示できるようになった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['mod_small_lightのNginx版ngx_small_lightをつくってみた']]></title>
    <link href="http://cubicdaiya.github.com/blog/ja/blog/2012/06/13/ngx-small-light/"/>
    <updated>2012-06-13T23:51:00+09:00</updated>
    <id>http://cubicdaiya.github.com/blog/ja/blog/2012/06/13/ngx-small-light</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/cubicdaiya/ngx_small_light">https://github.com/cubicdaiya/ngx_small_light</a></p>

<p>サムネイルの動的生成を行うApacheモジュールの<a href="http://code.google.com/p/smalllight/">mod_small_light</a>をNginxにポーティングしてみた。
nginx.confはこんな感じで、できるだけ<a href="http://code.google.com/p/smalllight/">mod_small_light</a>とあえて同じようにパラメータを指定できる形にしてある。
なのでパラメータの詳細についてはmod_small_lightの<a href="http://code.google.com/p/smalllight/wiki/PatternString">公式解説ページ</a>を参考にするとよい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">server</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">listen</span> <span class="mi">8000</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">server_name</span> <span class="s">localhost</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># small_lightを有効にする</span>
</span><span class='line'>    <span class="kn">small_light</span> <span class="no">on</span><span class="p">;</span>
</span><span class='line'>    <span class="c1"># 変換パターンを定義</span>
</span><span class='line'>    <span class="kn">small_light_pattern_define</span> <span class="s">msize</span> <span class="s">dw=500,dh=500,da=l,q=95,e=imagemagick,jpeghint=y</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">small_light_pattern_define</span> <span class="s">ssize</span> <span class="s">dw=120,dh=120,da=l,q=95,e=imagemagick,jpeghint=y</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># http://localhost:8000/small_light(p=msize)/img/filename.jpg -&gt; generate msize image</span>
</span><span class='line'>    <span class="c1"># http://localhost:8000/small_light(p=ssize)/img/filename.jpg -&gt; generate ssize image</span>
</span><span class='line'>    <span class="c1"># http://localhost:8000/small_light(of=gif,q=100)/img/filename.jpg -&gt; generate gif image which quality is 100</span>
</span><span class='line'>    <span class="kn">location</span> <span class="p">~</span> <span class="sr">small_light[^/]*/(.+)$</span> <span class="p">{</span>
</span><span class='line'>        <span class="kn">set</span> <span class="nv">$file</span> <span class="nv">$1</span><span class="p">;</span>
</span><span class='line'>        <span class="kn">rewrite</span> <span class="s">^</span> <span class="s">/</span><span class="nv">$file</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>続いてインストール方法について。NginxはApacheと違い、拡張モジュールを動的に組み込むことができないので、nginxと一緒にビルドして静的に組み込む必要がある。
また、変換パターンの抽出にPCREを活用しているので「&#8211;with-pcre」を付ける。あとImageMagickも必要。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd</span> <span class="k">${</span><span class="nv">ngx_small_light_src_dir</span><span class="k">}</span>
</span><span class='line'><span class="c"># Wand-configでリンクが必要なライブラリやヘッダファイルのパスを抽出・ビルド用ファイルを生成</span>
</span><span class='line'>./setup
</span><span class='line'><span class="nb">cd</span> <span class="o">{</span><span class="nv">$nginx_src_dir</span><span class="o">}</span>
</span><span class='line'>./configure --with-pcre --add-module<span class="o">=</span><span class="k">${</span><span class="nv">ngx_small_light_src_dir</span><span class="k">}</span>
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>あとは↑のnginx.confのコメントに書かれているURLを叩けばパラメータで指定した変換を行なってレスポンスを返してくれる。</p>

<h1>ngx_small_light開発の経緯</h1>

<p>時代の流れなのか近頃はNginxはバリバリ使ってるけどApacheは使ったことがないというエンジニアもちらほら見かけるので、
Nginxで画像変換を行いたいという需要はそれなりにあるのではないかと思う。</p>

<p>元々mod_small_lightにはお仕事で大変お世話になっていて、自分の用途に必要なパラメータを約20個追加するくらい改造して開発・運用しているので、
ちょっと頑張ればNginxでも同じようにできるだろうと思った。(実際には結構大変だった)</p>

<p>また、実はNginxにはimage_filterという画像変換モジュールが標準で付いてくるのだが、
mod_small_lightに慣れている自分からするとパラメータの指定方法がイケテない。
例えばリクエストされた画像をMサイズ(500x500)あるいはSサイズ(120x120)に変換するケースを考えてみよう。
さらにMサイズの場合は画質を95、Sサイズの場合は100にしたいとする。</p>

<h2>image_filterの場合</h2>

<p>image_filterの場合は以下のように変数代入やif文による分岐制御、正規表現によるマッチングなど非常に多くの機能を使って実現することとなる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">location</span> <span class="p">~</span> <span class="sr">/resize/(msize|ssize)/([^/]*\.jpg)$</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">set</span> <span class="nv">$type</span> <span class="nv">$1</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">set</span> <span class="nv">$file</span> <span class="nv">$2</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">rewrite</span> <span class="s">^</span> <span class="s">/</span><span class="nv">$file</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">location</span> <span class="p">~</span> <span class="sr">/[^/]*\.jpg$</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">if</span> <span class="s">(</span><span class="nv">$type</span> <span class="p">=</span> <span class="s">msize)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kn">set</span> <span class="nv">$q</span> <span class="mi">95</span><span class="p">;</span>
</span><span class='line'>        <span class="kn">set</span> <span class="nv">$w</span> <span class="mi">500</span><span class="p">;</span>
</span><span class='line'>        <span class="kn">set</span> <span class="nv">$h</span> <span class="mi">500</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">if</span> <span class="s">(</span><span class="nv">$type</span> <span class="p">=</span> <span class="s">ssize)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kn">set</span> <span class="nv">$q</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>        <span class="kn">set</span> <span class="nv">$w</span> <span class="mi">120</span><span class="p">;</span>
</span><span class='line'>        <span class="kn">set</span> <span class="nv">$h</span> <span class="mi">120</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">image_filter_jpeg_quality</span> <span class="nv">$q</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">image_filter</span> <span class="s">resize</span> <span class="nv">$w</span> <span class="nv">$h</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回の場合、生成する画像の種類が2種類と少ないので実感しづらいかもしれないが、実際のシステムに適用する場合は
透過処理やブラー処理、cropするのかresizeするのかといろんなことを考慮する必要があり、これらをさきほどからある複数の構文で行うとなるともっと複雑になるだろう。</p>

<h2>ngx_small_lightの場合</h2>

<p>一方、ngx_small_lightでは以下のように書ける。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">small_light</span> <span class="no">on</span><span class="p">;</span>
</span><span class='line'><span class="k">small_light_pattern_define</span> <span class="s">msize</span> <span class="s">dw=500,dh=500,q=95</span><span class="p">;</span>
</span><span class='line'><span class="k">small_light_pattern_define</span> <span class="s">ssize</span> <span class="s">dw=120,dh=120,q=100</span><span class="p">;</span>
</span><span class='line'><span class="k">location</span> <span class="p">~</span> <span class="sr">small_light[^/]*/(.+)$</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">set</span> <span class="nv">$file</span> <span class="nv">$1</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">rewrite</span> <span class="s">^</span> <span class="s">/</span><span class="nv">$file</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>image_filterがパラメータの解析をnginx.confの中でやってるのに対してngx_small_lightはパラメータの解析をngx_small_light自体が行うので、
nginx.conf自体は非常にシンプルなものとなる。もちろん変換パターンの定義が長くなりすぎてしまう可能性はあるが、
変数代入やif文による分岐制御、正規表現によるマッチングだらけの設定ファイルよりははるかにマシだ。
nginx.confの構文はApacheのそれと比べるとかなりプログラマティックで強力だが、あまり頑張りすぎると柔軟な設定ファイルからただのデバッグしづらいプログラムファイルと化す。</p>

<h1>今後の課題</h1>

<p>まだ開発したばかりということもあってngx_small_lightにはmod_small_lightに比べるともの足りない点がいくつかある。
まず挙げられるのがImageMagick以外の画像変換ライブラリのサポート。具体的にはImlib2とGD。
Imlib2はmod_small_lightが、GDはnginxのimage_filterモジュールがサポートしてるということで候補に挙げている。</p>

<p>次にmod_small_lightがサポートしていないアイコン埋め込みや画像のプロファイル情報を削除するためのパラメータの追加。
これはImageMagickであればさほど難しくないので近いうちに追加する予定。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['An O(NP) Sequence Comparison Algorithm with Scala']]></title>
    <link href="http://cubicdaiya.github.com/blog/ja/blog/2012/04/30/scala-onp/"/>
    <updated>2012-04-30T03:10:00+09:00</updated>
    <id>http://cubicdaiya.github.com/blog/ja/blog/2012/04/30/scala-onp</id>
    <content type="html"><![CDATA[<p>新しい言語を勉強する際、技術書のサンプルを読んだり写経したりするだけだとしっくりこないことが多いので
自分の好きなアルゴリズムを実装してみるということをよくやる。僕の場合、とりあえずdiffを実装している。
ただ、LCSやSESを真面目に計算するのは少々面倒なのでいつも編集距離だけ求めるプログラムを書くことにしている(たまに気が変わってLCSやSESを求めるところまで行くこともあるが、今のところそこまで行ったのはC++/Lua/Javascriptだけだ)。
以下のページに各種言語によるdiff(An O(NP) Sequence Comparison Algorithm)の実装が置いてある。</p>

<p><a href="https://github.com/cubicdaiya/onp">https://github.com/cubicdaiya/onp</a></p>

<p>で、近頃はScalaを勉強しているので今回もそれにならうことにした。</p>

<p><a href="https://github.com/cubicdaiya/onp/blob/master/scala/onp.scala">https://github.com/cubicdaiya/onp/blob/master/scala/onp.scala</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// The algorithm implemented here is based on &quot;An O(NP) Sequence Comparison Algorithm&quot;</span>
</span><span class='line'><span class="c1">// by described by Sun Wu, Udi Manber and Gene Myers</span>
</span><span class='line'>
</span><span class='line'><span class="k">package</span> <span class="nn">onp</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Diff</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="nc">_a</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">T</span><span class="o">],</span> <span class="nc">_b</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">T</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="k">var</span> <span class="n">a</span> <span class="k">=</span> <span class="nc">_a</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">var</span> <span class="n">b</span> <span class="k">=</span> <span class="nc">_b</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">var</span> <span class="n">m</span> <span class="k">=</span> <span class="nc">_a</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">var</span> <span class="n">n</span> <span class="k">=</span> <span class="nc">_b</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">editdistance</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">m</span> <span class="o">&gt;=</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">t1</span> <span class="k">=</span> <span class="n">a</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">t2</span> <span class="k">=</span> <span class="n">m</span>
</span><span class='line'>      <span class="n">a</span> <span class="k">=</span> <span class="n">b</span>
</span><span class='line'>      <span class="n">b</span> <span class="k">=</span> <span class="n">t1</span>
</span><span class='line'>      <span class="n">m</span> <span class="k">=</span> <span class="n">n</span>
</span><span class='line'>      <span class="n">n</span> <span class="k">=</span> <span class="n">t2</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">offset</span><span class="k">:</span>      <span class="kt">Int</span> <span class="o">=</span> <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">delta</span><span class="k">:</span>       <span class="kt">Int</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="n">m</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">size</span><span class="k">:</span>        <span class="kt">Int</span> <span class="o">=</span> <span class="n">m</span> <span class="o">+</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">3</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">fp</span><span class="k">:</span>   <span class="kt">Array</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Array</span><span class="o">(</span><span class="n">size</span><span class="o">)</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">p</span><span class="k">:</span>           <span class="kt">Int</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="n">fp</span><span class="o">.</span><span class="n">map</span><span class="o">{</span><span class="n">x</span> <span class="k">=&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="o">}</span>
</span><span class='line'>    <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">p</span> <span class="k">=</span> <span class="n">p</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">k</span> <span class="k">&lt;-</span> <span class="o">(-</span><span class="n">p</span> <span class="n">to</span> <span class="n">delta</span><span class="o">)</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">fp</span><span class="o">(</span><span class="n">k</span> <span class="o">+</span> <span class="n">offset</span><span class="o">)</span> <span class="k">=</span> <span class="n">snake</span><span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="n">fp</span><span class="o">(</span><span class="n">k</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">offset</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">fp</span><span class="o">(</span><span class="n">k</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">offset</span><span class="o">))</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">k</span> <span class="k">&lt;-</span> <span class="o">(</span><span class="n">delta</span> <span class="o">+</span> <span class="n">p</span> <span class="n">to</span> <span class="n">delta</span><span class="o">).</span><span class="n">reverse</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">fp</span><span class="o">(</span><span class="n">k</span> <span class="o">+</span> <span class="n">offset</span><span class="o">)</span> <span class="k">=</span> <span class="n">snake</span><span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="n">fp</span><span class="o">(</span><span class="n">k</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">offset</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">fp</span><span class="o">(</span><span class="n">k</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">offset</span><span class="o">))</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">fp</span><span class="o">(</span><span class="n">delta</span> <span class="o">+</span> <span class="n">offset</span><span class="o">)</span> <span class="k">=</span> <span class="n">snake</span><span class="o">(</span><span class="n">delta</span><span class="o">,</span> <span class="n">fp</span><span class="o">(</span><span class="n">delta</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">offset</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">fp</span><span class="o">(</span><span class="n">delta</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">offset</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">while</span><span class="o">(</span><span class="n">fp</span><span class="o">(</span><span class="n">delta</span> <span class="o">+</span> <span class="n">offset</span><span class="o">)</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">)</span>
</span><span class='line'>    <span class="n">delta</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">p</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">snake</span><span class="o">(</span><span class="n">k</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">p</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">pp</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span><span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">y</span> <span class="k">=</span> <span class="n">scala</span><span class="o">.</span><span class="n">math</span><span class="o">.</span><span class="n">max</span><span class="o">(</span><span class="n">p</span><span class="o">,</span> <span class="n">pp</span><span class="o">)</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">x</span> <span class="k">=</span> <span class="n">y</span> <span class="o">-</span> <span class="n">k</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="o">==</span> <span class="n">b</span><span class="o">(</span><span class="n">y</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">x</span> <span class="k">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">y</span> <span class="k">=</span> <span class="n">y</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">y</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使い方はこんな感じ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">onp.Diff</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">main</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">diff</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Diff</span><span class="o">[</span><span class="kt">Char</span><span class="o">](</span><span class="n">args</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="n">toCharArray</span><span class="o">(),</span> <span class="n">args</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="n">toCharArray</span><span class="o">())</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;editdistance: &quot;</span> <span class="o">+</span> <span class="n">diff</span><span class="o">.</span><span class="n">editdistance</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行してみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sbt
</span><span class='line'><span class="o">[</span>info<span class="o">]</span> Set current project to default-a136e9 <span class="o">(</span>in build file:/home/bokko/workspace/onp/scala/<span class="o">)</span>
</span><span class='line'>&gt; run abc abd
</span><span class='line'><span class="o">[</span>info<span class="o">]</span> Running main abc abd
</span><span class='line'>editdistance: 2
</span><span class='line'><span class="o">[</span>success<span class="o">]</span> Total <span class="nb">time</span>: 0 s, completed 2012/04/30 3:17:18
</span><span class='line'>&gt; run abcdef dacfea
</span><span class='line'><span class="o">[</span>info<span class="o">]</span> Running main abcdef dacfea
</span><span class='line'>editdistance: 6
</span><span class='line'><span class="o">[</span>success<span class="o">]</span> Total <span class="nb">time</span>: 0 s, completed 2012/04/30 3:17:40
</span><span class='line'>&gt; run acbdeacbed acebdabbabed
</span><span class='line'><span class="o">[</span>info<span class="o">]</span> Running main acbdeacbed acebdabbabed
</span><span class='line'>editdistance: 6
</span><span class='line'><span class="o">[</span>success<span class="o">]</span> Total <span class="nb">time</span>: 0 s, completed 2012/04/30 3:17:42
</span><span class='line'>&gt;
</span></code></pre></td></tr></table></div></figure>


<p>まぁ、いろんな言語で実装してみてはいるもののどの言語でも書き方が大体一緒なので、なんか言語の特徴活かした書き方があればそういう風に書き直したいなぁ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['Scalaとsbt']]></title>
    <link href="http://cubicdaiya.github.com/blog/ja/blog/2012/04/28/scala-sbt/"/>
    <updated>2012-04-28T20:38:00+09:00</updated>
    <id>http://cubicdaiya.github.com/blog/ja/blog/2012/04/28/scala-sbt</id>
    <content type="html"><![CDATA[<p>最近Scalaの勉強をしているのだが、インタプリタだと「Hello, World!」を表示するだけのプログラムでも
JVMの起動が遅くて実行するのに2〜3秒かかったり、コンパイルが遅いのでどうしたものかと思ってたら<a href="https://github.com/harrah/xsbt">sbt</a>というのを使うといいらしい。
sbtはSimple-Build-Toolの略でScalaやJavaのためのビルドツールだ。長らくJava方面からは遠ざかっていたのでAntやMavenはもうさっぱり忘れてしまったが、
これはなかなかいい。というわけでまずはインストールおよび設定。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>wget http://typesafe.artifactoryonline.com/typesafe/ivy-releases/org.scala-tools.sbt/sbt-launch/0.11.2/sbt-launch.jar
</span><span class='line'>mv sbt-launch.jar ~/bin/ <span class="c"># パスの通ったディレクトリに移動</span>
</span><span class='line'><span class="nb">cd</span> ~/bin/
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;java -Xms512M -Xmx1536M -Xss1M -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=384M -jar ~/bin/sbt-launchl.jar&quot;</span> &gt; sbt
</span><span class='line'>chmod u+x sbt
</span></code></pre></td></tr></table></div></figure>


<p>次にプロジェクトディレクトリ(ここではhello)を作ってプログラムファイルを配置する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd </span>hello
</span><span class='line'>ls
</span><span class='line'>hi.scala
</span></code></pre></td></tr></table></div></figure>


<p>hi.scalaはこんな感じ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// hi.scala</span>
</span><span class='line'><span class="k">object</span> <span class="nc">Hi</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Hello, World!&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>さきほど作成したsbtを実行する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sbt
</span><span class='line'><span class="o">[</span>info<span class="o">]</span> Set current project to default-3911ac <span class="o">(</span>in build file:/home/bokko/programming/scala/hello/<span class="o">)</span>
</span><span class='line'>&gt; run
</span><span class='line'><span class="o">[</span>info<span class="o">]</span> Updating <span class="o">{</span>file:/home/bokko/programming/scala/hello/<span class="o">}</span>default-3911ac...
</span><span class='line'><span class="o">[</span>info<span class="o">]</span> Resolving org.scala-lang#scala-library;2.9.1 ...
</span><span class='line'><span class="o">[</span>info<span class="o">]</span> Done updating.
</span><span class='line'><span class="o">[</span>info<span class="o">]</span> Compiling 1 Scala <span class="nb">source </span>to /home/bokko/programming/scala/hello/target/scala-2.9.1/classes...
</span><span class='line'><span class="o">[</span>info<span class="o">]</span> Running Hi
</span><span class='line'>Hello, World!
</span><span class='line'><span class="o">[</span>success<span class="o">]</span> Total <span class="nb">time</span>: 3 s, completed 2012/04/28 21:13:07
</span><span class='line'>&gt;
</span></code></pre></td></tr></table></div></figure>


<p>このようにsbtは実行したディレクトリをスキャンしてScalaのプログラムをかき集めてコンパイル・実行することができる。
また、ファイルの変更も検知してくれるので、以下のように変更を加えて、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// hi.scala</span>
</span><span class='line'><span class="k">object</span> <span class="nc">Hi</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="k">=</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Hello, World, bokko!&quot;</span><span class="o">)</span> <span class="c1">// bokkoを追加</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>もう一度実行すると自動的に差分コンパイルしてから実行される。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&gt; run
</span><span class='line'><span class="o">[</span>info<span class="o">]</span> Compiling 1 Scala <span class="nb">source </span>to /home/bokko/programming/scala/hello/target/scala-2.9.1/classes...
</span><span class='line'><span class="o">[</span>info<span class="o">]</span> Running Hi
</span><span class='line'>Hello, World, bokko!
</span><span class='line'><span class="o">[</span>success<span class="o">]</span> Total <span class="nb">time</span>: 1 s, completed 2012/04/28 21:15:43
</span><span class='line'>&gt;
</span></code></pre></td></tr></table></div></figure>


<p>この他にもsbtはOMakeのような継続ビルド・テストの機能があって、コマンドの頭に「~」をつけるとファイルの変更を検知して
その都度ビルドやテストを走らせてくれる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&gt; ~ compile
</span><span class='line'><span class="o">[</span>success<span class="o">]</span> Total <span class="nb">time</span>: 0 s, completed 2012/04/28 21:23:15
</span><span class='line'>1. Waiting <span class="k">for </span><span class="nb">source </span>changes... <span class="o">(</span>press enter to interrupt<span class="o">)</span>
</span><span class='line'><span class="o">[</span>info<span class="o">]</span> Compiling 1 Scala <span class="nb">source </span>to /home/bokko/programming/scala/hello/target/scala-2.9.1/classes...
</span><span class='line'><span class="o">[</span>success<span class="o">]</span> Total <span class="nb">time</span>: 2 s, completed 2012/04/28 21:23:23
</span><span class='line'>2. Waiting <span class="k">for </span><span class="nb">source </span>changes... <span class="o">(</span>press enter to interrupt<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>また、sbtからscalaインタプリタを起動することもできる。(便利なのに何故かこのコマンドはhelpを実行しても表示されない)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&gt; console
</span><span class='line'><span class="o">[</span>info<span class="o">]</span> Starting scala interpreter...
</span><span class='line'><span class="o">[</span>info<span class="o">]</span>
</span><span class='line'>Welcome to Scala version 2.9.1.final <span class="o">(</span>OpenJDK 64-Bit Server VM, Java 1.6.0_24<span class="o">)</span>.
</span><span class='line'>Type in expressions to have them evaluated.
</span><span class='line'>Type :help <span class="k">for </span>more information.
</span><span class='line'>
</span><span class='line'>scala&gt;
</span></code></pre></td></tr></table></div></figure>


<p>ScalaはJavaと同じくEclipseみたいなIDEないときついよなぁと思ってたのですが、案外そうでもなくscala-modeとensimeがあれば
結構サクサク書けるので私みたいにターミナルに棲息しているようなプログラマでもとっつきやすく現時点でもかなり気に入ってます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['原点']]></title>
    <link href="http://cubicdaiya.github.com/blog/ja/blog/2012/04/25/springhead/"/>
    <updated>2012-04-25T03:12:00+09:00</updated>
    <id>http://cubicdaiya.github.com/blog/ja/blog/2012/04/25/springhead</id>
    <content type="html"><![CDATA[<p>今引越しの準備で部屋を整理している。本棚にあった技術書はあらかた会社の机(とその下)に移動したし、その他の本も大体処分する予定。
そんな中、大学時代に所属していたサークルの会誌が出てきた。</p>

<h1>大学時代のサークル</h1>

<p>そのサークルでは毎年秋の学祭に展示と模擬店をやっていて、部員が作ったゲームプログラムや電子工作物を展示したり、
たこチャーハンやおしるこを出したりしていた。(模擬店の内容は毎年<del>揉める</del>変わる)
みんな基本的に追い込まれないとヤル気が出ないので学祭の一週間前とかになると展示のために徹夜でプログラムを書いていた。</p>

<p>1回生の時は1週間ぶっとおしでSTGを作っていたが、今やれって言われたら多分無理だ。そのSTGはs.cというファイル名で
行数は2000行くらいだが、mainループが数百行あってオブジェクトの当たり判定関数が何故か登場キャラの数だけ存在していたり、
何もしない関数(!)があったり、そのほかにも何かいろいろ摩訶不思議なコードがあったりで他の人が見れたものではなかった。
「これは何故ちゃんと動いているんだ？」と驚愕している人さえいて、今でもたまにネタにされている。
プログラミング歴半年以下の学生が書いたコードなんだから少しは多めに見て欲しかったが、それを考慮してもひどかったらしい。</p>

<h1>会誌</h1>

<p>そしてそれとはまた別にひとりの部員につきひとつの記事をその会誌に寄稿し、展示会場で配布するということが行われていた。
内容は自由で、自分が書きたいことを書けば良い。ただほとんどの人は技術的な何かを書いていたと思う。
展示物のプログラムや電子工作について熱く語る人もいれば、文芸的プログラミングならぬ工芸的プログラミングと題して
情報工学を哲学的に語る(テキトーなこと言ってます)人もいた。</p>

<p>とても懐かしかったので作業を中断し、手に取って読んでみた。当時僕は「iアプリをつくろう」とか「Wikiパーサをつくろう」とか
ほぼ毎年の展示物に関することを書いていたのだけど、今見るとコード断片がテキトーに貼りつけてあってそれについて軽く説明しているだけの非常に手抜きな文章だった。
しかし、この経験は後にブログや技術雑誌(WEB+DB PRESSやSoftware Design)の原稿を執筆する上で非常に役に立ったし、
プログラマが敬遠しがちなドキュメンテーション作業に対する苦手意識をいとも簡単に克服できるようにしてくれた。
また、原稿には<strong>仮の締切</strong>と<strong>本当の締切</strong>があるということも教えてくれた。というのも大抵の人は最初に知らされた締切を守らないので、
編集長はまず仮の締切を掲示する。そしてまだできてませんと泣きついてくる部員たちに今週いっぱいまでなら大丈夫ですよと(<strong>表面上</strong>)優しく微笑みかけるのだ。
最初から<strong>本当の締切</strong>を掲示してはいけない。それに間に合わなかったら起動修正が効かない上にそもそも間に合ったとしても編集作業をやる時間がない。</p>

<h1>過去・現在・未来</h1>

<p>自分や同期、また偉大な先輩達の記事を読み返していると、当時の自分が持っていて今の自分が持っていないあるいは忘れてしまったものを思い出せたような気がした。
というか就職してから今まで僕は何をやっていたのだろう。当時の僕はもっと野心的で何事にも積極的だったはずなんだが、
今はずいぶんと保守的なおっさんになってしまったように思える。これじゃ駄目だ。気持ちを切り替えねば。</p>

<p>卒業してから5年。自分の顔を知っている後輩もほとんど卒業してしまったので、もう学祭に行くことは多分ないだろう。
でもこの会誌は捨てずに持っておこうと思う。これは僕の原点であり、大切な想い出だ。</p>

<p>そして必要な時だけ眺めるのだ。でも、いつも見てる必要はない。</p>
]]></content>
  </entry>
  
</feed>
