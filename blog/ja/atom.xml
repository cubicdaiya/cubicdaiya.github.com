<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[bokko bokkoにしてやんよ]]></title>
  <link href="http://cubicdaiya.github.io/blog/ja/atom.xml" rel="self"/>
  <link href="http://cubicdaiya.github.io/blog/ja/"/>
  <updated>2013-10-08T00:54:02+09:00</updated>
  <id>http://cubicdaiya.github.io/blog/ja/</id>
  <author>
    <name><![CDATA[Tatsuhiko Kubo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[isucon予選に 「くらげとみかんと江戸幕府」チームで参加してきました]]></title>
    <link href="http://cubicdaiya.github.io/blog/ja/blog/2013/10/07/isucon3/"/>
    <updated>2013-10-07T22:40:00+09:00</updated>
    <id>http://cubicdaiya.github.io/blog/ja/blog/2013/10/07/isucon3</id>
    <content type="html"><![CDATA[<p>同僚の<a href="https://twitter.com/walf443">@walf443</a>と<a href="https://twitter.com/edvakf">@edvakf</a>とisucon予選一日目に参加してきました。</p>

<p>僕がくらげで<a href="https://twitter.com/walf443">@walf443</a>がみかん、そして<a href="https://twitter.com/edvakf">@edvakf</a>が江戸幕府です。</p>

<p>16:30頃の時点でベンチマークが2〜3時間以上通ってなかった上に
RawScore(エラーによる原点を除いたスコア)も散々だったので完全に通夜状態だったのですが、
17:00頃から一気に巻き返して最終的には予選一日目5位(19412.5点)で通過(暫定)することができました。</p>

<p>今回は主に僕と<a href="https://twitter.com/edvakf">@edvakf</a>でアプリケーションの修正をやって、
<a href="https://twitter.com/walf443">@walf443</a>がミドルウェアまわりをやるという役割でスタートし、
最終的には僕もアプリケーションの修正をやる傍らミドルウェアの置き換え等を行う形になりました。</p>

<p>言語はRubyにするかPHPにするかで意見が割れていたのですが最終的に僕の強い希望でPHPに決まりました。(予選通過(暫定)できて本当に良かったです。。。)</p>

<p>ここからは実際にやったことを主に僕視点で解説していきます。(<a href="https://twitter.com/walf443">@walf443</a>の解説は<a href="http://d.hatena.ne.jp/walf443/20131006/1381072851">こちら</a>)</p>

<h2>初期状態で既にエラーが出る</h2>

<p><a href="">公式ブログ</a>にもあるようにPHPの場合は初期状態でも過負荷で必ずベンチマークでエラーが出てしまうのですが、
最後までこのエラーは解消できませんでした。</p>

<p>でも今回はベンチマーク時にエラーが出てもエラーの数が少なければ
ちょっと減点される程度でスコア自体は登録できる仕組みになっていたのでこのエラーはひとまず無視してアプリケーションの修正にとりかかることにしました。</p>

<p>しかし、この時点で既に12:00を過ぎており、一時は「やっぱりRubyにしようか」という話にもなりましたが、
このタイミングで(エラー出てたけど)ちょうどベンチマークが成功したのでギリギリPHPで行くことになりました。</p>

<h2>スロークエリを探す</h2>

<p>ベンチマークを実行している間にtopを眺めていると明らかにMySQLが詰まっていたので、<a href="">walf443</a>に
pt-query-digestを動かしてもらってその出力結果から一番重いクエリを書きかえたりインデックスを貼ったりして対応していました。(実際に貼ったインデックスや書き換えたクエリ等については<a href="https://twitter.com/walf443">@walf443</a>の解説を参照)</p>

<h2>PHP5.4 -> PHP5.5 with ZendOpcache and APCu</h2>

<p>もっとも上記の作業は複数人でやるとコンフリクトが起きそうだったので、修正やインデックスの作成はほかの人に任せて
僕の方ではPHPのバージョンを5.5にあげてZendOpcacheやAPCuの設定をしていました。</p>

<p>PHP5.5をインストールした直後にPDOまわりが動かなくなって焦りましたが、冷静な<a href="https://twitter.com/walf443">@walf443</a>のおかげでなんとか解決。</p>

<h2>APCuでひたすらキャッシュ</h2>

<p>今回は「SELECT count(*) &#8230;」みたいな集計クエリが結構見られたのでこの結果をAPCuでキャッシュしていきました。</p>

<h2>Apacheの前段にNginxを配置</h2>

<p>初期設定では静的ファイル(css, js, img)もpreforkのApacheで返していたので、前段にNginxを配置してそちらで返すようにしました。</p>

<p>なお、gzip圧縮をOnにするとスコアが下がる罠があったそうですが、この時点ではそこまで気が回らなかったのでこの罠にはかからずに済みました。</p>

<p>実はNginxはOpenRestyでインストールしたんだけど、今回は使わなかった。というか使うところまで行けなかった。</p>

<h2>ベンチマークが常に失敗するようになる</h2>

<p>序盤で出遅れつつもRawScoreは少しずつ上がってきていたのですが、中盤からベンチマークが常に失敗する自体に。。。</p>

<p>エラーは元々最初から出ていたのですが、このあたりからエラーの数が臨界点を突破したのか常に失敗する状態になりました。</p>

<p>アプリケーションの修正やミドルウェアの設定は続けていましたが、この状態が何時間も続いたので
15:00頃は「今日の晩御飯どうしようかな」とか本気で考えていた気がします。</p>

<h2>workloadを上げて対処</h2>

<p>16:30を過ぎた頃、どうせ失敗するであろうベンチマークをtopを眺めていたところ、
ベンチマークプログラムがCPUを使い切れていないことに気づいたので試しにworkload(ベンチマークの並列度)を上げてみたら
相変わらずエラーは出るもののベンチマークは常に成功するようになりました。</p>

<p>どうもこのエラーはベンチマークのスコア(=アプリケーションのパフォーマンス)が良くなると出にくくなるようです。</p>

<p>ようやくベンチマークが安定するようになったもののこの時点でスコアはまだ4〜5000点なので予選通過には程遠い状態でした。</p>

<h2>魔のmarkdown</h2>

<p>ベンチマークをかけている間にtopを眺めているとMySQLのCPU使用率が30〜40%まで下がってきたかわりにちょくちょくmarkdownのプロセスが顔を出すようになりました。</p>

<p>これは(PHPの場合は)shell_execで外部プロセスを呼び出し、markdownのテキストをHTMLに変換するという処理になっていたので、
PHPのmarkdownパーサーに差し替えることで対処しました。</p>

<p>これでスコアが一気に倍の10000点を越え、希望の光が見えてきました。残り一時間。。。</p>

<h2>ラストスパート</h2>

<p>実はこの後何をしたのかよく覚えていませんｗ。引き続き<a href="https://twitter.com/walf443">@walf443</a>がMySQLのパラメータを変更したり、
<a href="https://twitter.com/edvakf">@edvakf</a>がアプリケーションの修正をやってる間に僕がベンチマークをかけ続けていたらいつの間にかスコアが19412.5点まで上がっていました。</p>

<h2>前回の反省を踏まえて</h2>

<p>前回のisucon#2に参加したときは手当たり次第にボトルネックになりそうなところから手をつけて最適化していたんですが、
ほとんど外れで事前にボトルネックを分析するの大事だなぁと思っていたので今回はボトルネックの分析により時間をかけました。
まぁ、実際にやったのはほとんど<a href="https://twitter.com/walf443">@walf443</a>ですが。</p>

<h2>本戦に向けて(暫定)</h2>

<p>最初に書いたようにラスト1時間前まで通夜状態だったので予選一日目5位に滑り込んだ時は大はしゃぎだったのですが、
やっぱり優勝するならもっとドラスティックな変更(ホットスポットをOpenRestyで書き直すとか)を入れないと駄目だなぁと思いました。</p>

<p>まだ予選通過は暫定ですが、本戦出れたら頑張りたいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ngx_small_light-0.4.1]]></title>
    <link href="http://cubicdaiya.github.io/blog/ja/blog/2013/09/26/ngx-small-light-0-4-1/"/>
    <updated>2013-09-26T03:26:00+09:00</updated>
    <id>http://cubicdaiya.github.io/blog/ja/blog/2013/09/26/ngx-small-light-0-4-1</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/cubicdaiya/ngx_small_light">https://github.com/cubicdaiya/ngx_small_light</a></p>

<p>ngx_small_light v0.4.1をリリースしました。変更内容は以下の2つです。</p>

<ul>
<li>e=imlib2 &amp; ofが使われていない場合にContent-Typeが拡張子の文字列になってしまうバグを修正</li>
<li>image/pngであるべきところがpngになってしまう</li>
<li>e=(imagemagick|gd)の場合にContent-Type用の文字列データに定数を使う</li>
<li>前のバージョンまでは毎回メモリプールからアロケートしてた</li>
</ul>


<p>というわけでバグフィックスと細かい最適化1つずつです。
まぁ、バグの方は↑の最適化してる最中に見つけて速攻で直したというオチなのですが。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mruby_nginx_module-0.1.1]]></title>
    <link href="http://cubicdaiya.github.io/blog/ja/blog/2013/08/24/mruby-nginx-module-0-1-1/"/>
    <updated>2013-08-24T01:27:00+09:00</updated>
    <id>http://cubicdaiya.github.io/blog/ja/blog/2013/08/24/mruby-nginx-module-0-1-1</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/cubicdaiya/mruby_nginx_module">https://github.com/cubicdaiya/mruby_nginx_module</a></p>

<p>mruby_nginx_module-0.1.1をリリースしました。主な変更点は以下になります。</p>

<ol>
<li>mruby_init, mruby_set, mruby_xxx_handlerに相対パスを指定できるように変更</li>
<li>mruby_cacacheをmainコンテキストで有効化</li>
<li>Nginx::Request.var.setのバグ修正</li>
<li>Nginx::(Connection|Server)を削除</li>
<li>Nginx::Headers_inを読み取り専用に変更</li>
<li>Nginx.return(Nginx::HTTP_OK)が呼ばれると空バッファを出力してしまうのを修正</li>
</ol>


<p>今回の変更点で主なものとしてはファイル指定用の各ハンドラーディレクティブに相対パスを指定できるようになったことです。
例えば以前までは以下のようにフルパスで指定する必要がありましたが、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">location</span> <span class="s">/content</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">mruby_rewrite_handler</span> <span class="s">/etc/nginx/mrbs/rewrite.mrb</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">mruby_access_handler</span>  <span class="s">/etc/nginx/mrbs/access.mrb</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">mruby_content_handler</span> <span class="s">/etc/nginx/mrbs/content.mrb</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">mruby_log_handler</span>     <span class="s">/etc/nginx/mrbs/log.mrb</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>0.1.1以降ではこのように相対パスで指定できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">location</span> <span class="s">/content</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">mruby_rewrite_handler</span> <span class="s">mrbs/rewrite.mrb</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">mruby_access_handler</span>  <span class="s">mrbs/access.mrb</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">mruby_content_handler</span> <span class="s">mrbs/content.mrb</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">mruby_log_handler</span>     <span class="s">mrbs/log.mrb</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>起点となるディレクトリはconfigure時に指定した&#8211;conf-pathを元にしていて、
例えば&#8211;conf-path=/etc/nginx/nginx.confなら/etc/nginxが起点のディレクトリになります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mruby_nginx_module-0.1.0]]></title>
    <link href="http://cubicdaiya.github.io/blog/ja/blog/2013/08/17/mruby-nginx-module-0-dot-1-0/"/>
    <updated>2013-08-17T13:50:00+09:00</updated>
    <id>http://cubicdaiya.github.io/blog/ja/blog/2013/08/17/mruby-nginx-module-0-dot-1-0</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/cubicdaiya/mruby_nginx_module">https://github.com/cubicdaiya/mruby_nginx_module</a></p>

<p>mruby_nginx_module-0.1.0をリリースしました。主な変更点は以下になります。</p>

<ol>
<li>Nginx::Contextが意図しないタイミングでmrubyのGCに回収されてしまうバグの修正</li>
<li>ヘッダおよびボディフィルターのハンドラが設定ファイルの書き方次第でハングする問題の修正</li>
<li>nginx.confに記述されてるハンドラだけを呼ぶように変更</li>
<li>POST_READ_PHASEおよびSERVER_REWRITE_PHASEのハンドラを削除</li>
<li>Nginxクラスのメンバ変数や関数を整理</li>
<li>mruby_cacheをデフォルトでOnに変更</li>
<li>テストスイートの追加</li>
<li>Nginx::Timeのメソッド追加(time, http_time, cookie_time等)</li>
</ol>


<p>mruby_nginx_moduleのハンドラまわりの仕様は自分の中で大体固まってきて入るのですが、
まだ実装が追いついてない感じなので今後も割とドラスティックな変更が入るかもしれません。</p>

<p>あとソースコードの規模も大きくなってきたのでちゃんとテストを書くことにしました。</p>

<p>こんな感じで実行できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake <span class="nv">NGINX_BIN</span><span class="o">=</span>/usr/sbin/nginx
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ngxmodgen]]></title>
    <link href="http://cubicdaiya.github.io/blog/ja/blog/2013/08/13/ngxmodgen/"/>
    <updated>2013-08-13T00:38:00+09:00</updated>
    <id>http://cubicdaiya.github.io/blog/ja/blog/2013/08/13/ngxmodgen</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/cubicdaiya/ngxmodgen">https://github.com/cubicdaiya/ngxmodgen</a></p>

<p>Rubyの勉強がてらNginxモジュールのソースコードの雛形を生成するプログラムを書いてみました。こんな感じで生成できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir ngx_hoge_module <span class="nb">cd </span>ngx_hoge_module
</span><span class='line'><span class="nv">$ </span>ngxmodgen -n hoge
</span><span class='line'>ngx_http_hoge_module.c and config is generated
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>filterモジュールの場合は-tオプションにhttp_filterを指定します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir ngx_hoge_filter_module <span class="nb">cd </span>ngx_hoge_filter_module
</span><span class='line'><span class="nv">$ </span>ngxmodgen -n hoge -t http_filter <span class="c"># http filter module</span>
</span><span class='line'>ngx_http_hoge_filter_module.c and config is generated
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>RubyGemsにも登録したのでgemコマンドでインストールできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem install ngxmodgen
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mruby_nginx_moduleでアクセス制御]]></title>
    <link href="http://cubicdaiya.github.io/blog/ja/blog/2013/08/01/mruby-nginx-module4/"/>
    <updated>2013-08-01T01:04:00+09:00</updated>
    <id>http://cubicdaiya.github.io/blog/ja/blog/2013/08/01/mruby-nginx-module4</id>
    <content type="html"><![CDATA[<p><a href="http://cubicdaiya.github.io/blog/ja/blog/2013/07/31/mruby-nginx-module3/">前回の予告</a>どおり、
<a href="https://github.com/cubicdaiya/mruby_nginx_module">mruby_nginx_module</a>で
<a href="https://code.google.com/p/modaccesstoken/">mod_access_token</a>や<a href="https://github.com/cubicdaiya/ngx_access_token">ngx_access_token</a>のように
トークンによるアクセス制御やリソースの有効期限を設定する方法について解説します。</p>

<p>まず、<a href="https://code.google.com/p/modaccesstoken/">mod_access_token</a>や<a href="https://github.com/cubicdaiya/ngx_access_token">ngx_access_token</a>が
行うアクセス制御方法ですが、これは<a href="https://code.google.com/p/modaccesstoken/">mod_access_tokenのページ</a>を見るとわかりやすいでしょう。</p>

<p><a href="https://github.com/cubicdaiya/mruby_nginx_module">mruby_nginx_module</a>でこれと同じアクセス制御を行うnginx.confは以下のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">location</span> <span class="s">/index.html</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">set</span> <span class="nv">$access_key</span> <span class="s">&quot;bokko&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">set</span> <span class="nv">$secret_key</span> <span class="s">&quot;cubicdaiya&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">mruby_access_handler_code</span> <span class="s">&#39;</span>
</span><span class='line'>        <span class="s">r</span>          <span class="p">=</span> <span class="s">Nginx::Request.new</span>
</span><span class='line'>        <span class="s">now</span>        <span class="p">=</span> <span class="s">Nginx::Time.time()</span>
</span><span class='line'>        <span class="s">plain_text</span> <span class="p">=</span> <span class="s">r.method</span> <span class="s">+</span> <span class="s">r.uri</span> <span class="s">+</span> <span class="s">r.var.arg_expires.to_s</span> <span class="s">+</span> <span class="s">r.var.access_key.to_s</span>
</span><span class='line'>        <span class="s">hmac_sha1</span>  <span class="p">=</span> <span class="s">Nginx::Digest.hmac_sha1(plain_text,</span> <span class="s">r.var.secret_key)</span>
</span><span class='line'>        <span class="s">signature</span>  <span class="p">=</span> <span class="s">Nginx::Base64.encode(hmac_sha1)</span>
</span><span class='line'>        <span class="s">if</span> <span class="s">r.var.arg_expires</span> <span class="s">&lt;</span> <span class="s">now</span> <span class="s">||</span> <span class="s">signature</span> <span class="s">!=</span> <span class="s">r.var.arg_signature</span> <span class="s">then</span>
</span><span class='line'>            <span class="s">Nginx.return</span> <span class="s">Nginx::NGX_HTTP_FORBIDDEN</span>
</span><span class='line'>        <span class="s">end</span>
</span><span class='line'>    <span class="s">&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>なんと10行ちょっとで書けてしまいました。<a href="https://code.google.com/p/modaccesstoken/">mod_access_token</a>や<a href="https://github.com/cubicdaiya/ngx_access_token">ngx_access_token</a>がCで200〜300行くらいのコードであることを考えるとすごい進歩です。あらためてスクリプト言語の生産性の高さを認識することができました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mruby_nginx_module開発日記 その3〜Nginx::Digest〜]]></title>
    <link href="http://cubicdaiya.github.io/blog/ja/blog/2013/07/31/mruby-nginx-module3/"/>
    <updated>2013-07-31T01:19:00+09:00</updated>
    <id>http://cubicdaiya.github.io/blog/ja/blog/2013/07/31/mruby-nginx-module3</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/cubicdaiya/mruby_nginx_module">mruby_nginx_module</a>にNginx::Digestクラスを追加しました。
これでMD5やSHA1、HMAC-SHA1などのハッシュ関数を<a href="https://github.com/cubicdaiya/mruby_nginx_module">mruby_nginx_module</a>の中で呼び出すことができるようになりました。こんな感じで使えます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">server</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">listen</span>       <span class="mi">8000</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">server_name</span>  <span class="s">localhost</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">location</span> <span class="s">/hash</span> <span class="p">{</span>
</span><span class='line'>        <span class="kn">mruby_content_handler_code</span> <span class="s">&#39;</span>
</span><span class='line'>            <span class="s">mruby_content_handler_code</span> <span class="s">&#39;</span>
</span><span class='line'>            <span class="s">r</span> <span class="p">=</span> <span class="s">Nginx::Request.new</span>
</span><span class='line'>            <span class="s">text</span> <span class="p">=</span> <span class="s">r.var.arg_text</span>
</span><span class='line'>            <span class="s">md5</span>  <span class="p">=</span> <span class="s">Nginx::Digest.md5(text)</span>
</span><span class='line'>            <span class="s">sha1</span> <span class="p">=</span> <span class="s">Nginx::Digest.sha1(text)</span>
</span><span class='line'>            <span class="s">hmac</span> <span class="p">=</span> <span class="s">Nginx::Digest.hmac_sha1(text,</span> <span class="s">&quot;cubicdaiya&quot;)</span>
</span><span class='line'>            <span class="s">Nginx.rputs(&quot;text:&quot;</span> <span class="s">+</span> <span class="s">text)</span>
</span><span class='line'>            <span class="s">Nginx.rputs(&quot;\n&quot;)</span>
</span><span class='line'>            <span class="s">Nginx.rputs(&quot;md5</span> <span class="p">:</span><span class="s">&quot;</span> <span class="s">+</span> <span class="s">Nginx::Digest.hexdigest(md5))</span>
</span><span class='line'>            <span class="s">Nginx.rputs(&quot;\n&quot;)</span>
</span><span class='line'>            <span class="s">Nginx.rputs(&quot;sha1:&quot;</span> <span class="s">+</span> <span class="s">Nginx::Digest.hexdigest(sha1))</span>
</span><span class='line'>            <span class="s">Nginx.rputs(&quot;\n&quot;)</span>
</span><span class='line'>            <span class="s">Nginx.rputs(&quot;hmac(key=cubicdaiya):&quot;</span> <span class="s">+</span> <span class="s">Nginx::Digest.hexdigest(hmac))</span>
</span><span class='line'>            <span class="s">Nginx.rputs(&quot;\n&quot;)</span>
</span><span class='line'>        <span class="s">&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このバーチャルホストにアクセスしてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl <span class="s2">&quot;http://localhost:8000/hash?text=bokko&quot;</span>
</span><span class='line'>text:bokko
</span><span class='line'>md5 :fe9749f7f1d1c8ec7f6ddd1f0521cdb0
</span><span class='line'>sha1:cea3d1bca602a6017e9a02520e3d392ba6b7838d
</span><span class='line'>hmac<span class="o">(</span><span class="nv">key</span><span class="o">=</span>cubicdaiya<span class="o">)</span>:3c5b1594272423068bf9516eb45447e3b868051b
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>MD5やSHA1を求めるmrbgemは既にあるのですが、元々これらの機能はNginxのコアAPIを通して利用することができますし、
Nginx内部と<a href="https://github.com/cubicdaiya/mruby_nginx_module">mruby_nginx_module</a>とで別々の実装になるのもあまりよろしくないので採用していません。</p>

<p>また、これらのハッシュ関数に加えてbase64のエンコード/デコード機能も追加したので
<a href="https://code.google.com/p/modaccesstoken/">mod_access_token</a>や<a href="https://github.com/cubicdaiya/ngx_access_token">ngx_access_token</a>がやっているような
アクセス制御機構を<a href="https://github.com/cubicdaiya/mruby_nginx_module">mruby_nginx_module</a>で実現できるようになりました。その方法については次回解説します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mruby_nginx_module開発日記 その2〜Nginx::Context〜]]></title>
    <link href="http://cubicdaiya.github.io/blog/ja/blog/2013/07/28/mruby-nginx-module2/"/>
    <updated>2013-07-28T08:55:00+09:00</updated>
    <id>http://cubicdaiya.github.io/blog/ja/blog/2013/07/28/mruby-nginx-module2</id>
    <content type="html"><![CDATA[<p><a href="http://blog.matsumoto-r.jp/?p=3722">ngx_mrubyでnginxの内部変数を操作する</a>に触発されて
<a href="https://github.com/cubicdaiya/mruby_nginx_module">mruby_nginx_module</a>にNginx::Contextという機能を追加してみました。</p>

<p>元々<a href="https://github.com/cubicdaiya/mruby_nginx_module">mruby_nginx_module</a>(と<a href="https://github.com/matsumoto-r/ngx_mruby/">ngx_mruby</a>)は
nginxの各処理フェーズ(rewrite,access,content,etc)で使用するmrubyの状態遷移保存領域を共有しているので、
グローバル変数を各処理フェーズで共有できるようになっていますが、
リクエスト毎のコンテキストを各フェーズで共有するための仕組みがありませんでした。</p>

<p><a href="https://github.com/chaoslawful/lua-nginx-module">lua-nginx-module</a>を使ったことのある人なら「ああ、ngx.ctxのことか」と思うかもしれません。そのとおりです。
まぁ、上記の記事のようにnginxの内部変数で代用できないこともないんですが、あらかじめnginx.confでsetやmruby_setで
代入されている変数にしかアクセスできないのと、そもそもnginxの内部変数はただの文字列なのであまり使い勝手がよくありません。
その点、Nginx::Contextはハッシュテーブルなのでなんでも突っ込むことができます。</p>

<p>なにはともわれ実際のコードを見てみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="c1"># 設定読み込み時に$varを初期化</span>
</span><span class='line'><span class="k">mruby_init_code</span> <span class="s">&quot;</span><span class="nv">$var</span> <span class="p">=</span> <span class="mi">0</span><span class="p">;</span><span class="k">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">server</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">listen</span>       <span class="mi">8000</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">server_name</span>  <span class="s">localhost</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">root</span> <span class="s">html</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># rewrite -&gt; access -&gt; contentの順に実行される</span>
</span><span class='line'>    <span class="kn">location</span> <span class="s">/mruby</span> <span class="p">{</span>
</span><span class='line'>        <span class="kn">mruby_rewrite_handler_code</span> <span class="s">&#39;</span>
</span><span class='line'>            <span class="s">ctx</span> <span class="p">=</span> <span class="s">Nginx::Context.new</span>
</span><span class='line'>            <span class="c1"># ctx[&quot;count&quot;]はこの時点では必ずnil</span>
</span><span class='line'>            <span class="s">ctx[&quot;count&quot;]</span> <span class="p">=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="nv">$var</span> <span class="s">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="kn">&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="kn">mruby_access_handler_code</span> <span class="s">&#39;</span>
</span><span class='line'>            <span class="s">ctx</span> <span class="p">=</span> <span class="s">Nginx::Context.new</span>
</span><span class='line'>            <span class="s">ctx[&quot;count&quot;]</span> <span class="s">+=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="nv">$var</span> <span class="s">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="kn">&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="kn">mruby_content_handler_code</span> <span class="s">&#39;</span>
</span><span class='line'>            <span class="s">ctx</span> <span class="p">=</span> <span class="s">Nginx::Context.new</span>
</span><span class='line'>            <span class="s">ctx[&quot;count&quot;]</span> <span class="s">+=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="nv">$var</span> <span class="s">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="kn">Nginx.rputs(&quot;ctx.count:&quot;+</span> <span class="s">ctx[&quot;count&quot;].to_s)</span>
</span><span class='line'>            <span class="s">Nginx.rputs(&quot;\n&quot;)</span>
</span><span class='line'>            <span class="s">Nginx.rputs(&quot;</span><span class="nv">$var:&quot;</span> <span class="s">+</span> <span class="nv">$var.to_s</span><span class="s">)</span>
</span><span class='line'>            <span class="s">Nginx.rputs(&quot;\n&quot;)</span>
</span><span class='line'>        <span class="s">&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このバーチャルホストにアクセスしてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -l <span class="s2">&quot;http://localhost:8000/mruby&quot;</span>
</span><span class='line'>ctx.count:3
</span><span class='line'><span class="nv">$var</span>:3
</span><span class='line'><span class="nv">$ </span>curl -l <span class="s2">&quot;http://localhost:8000/mruby&quot;</span>
</span><span class='line'>ctx.count:3
</span><span class='line'><span class="nv">$var</span>:6
</span><span class='line'><span class="nv">$ </span>curl -l <span class="s2">&quot;http://localhost:8000/mruby&quot;</span>
</span><span class='line'>ctx.count:3
</span><span class='line'><span class="nv">$var</span>:9
</span><span class='line'>bokko-mint@bokko%
</span></code></pre></td></tr></table></div></figure>


<p>グローバス変数($var)はアクセスする度に増加していますが、Nginx::Contextは各リクエスト毎に独立しているので比較的安全に使うことができます。
また、Nginx::Contextはハッシュテーブルなのでなんでも突っ込むことができます。(大事なことなので二回言いました)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mruby_nginx_module開発日記 その1〜ngx_mrubyからのfork〜]]></title>
    <link href="http://cubicdaiya.github.io/blog/ja/blog/2013/07/28/mruby-nginx-module/"/>
    <updated>2013-07-28T07:54:00+09:00</updated>
    <id>http://cubicdaiya.github.io/blog/ja/blog/2013/07/28/mruby-nginx-module</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/cubicdaiya/mruby_nginx_module">https://github.com/cubicdaiya/mruby_nginx_module</a></p>

<p>一昨日になりますが、これまで数十回かPull-Requestを送る形で開発に参加していた
<a href="https://github.com/matsumoto-r/ngx_mruby/">ngx_mruby</a>をforkして
<a href="https://github.com/cubicdaiya/mruby_nginx_module">mruby_nginx_module</a>の開発をはじめることにしました。</p>

<p>forkの簡単な経緯はこんな感じ。(一部のツイートが重複していますが、単一のツイートだけ取り出す方法がわからなかったのでこうなってます)</p>

<blockquote class="twitter-tweet"><p><a href="https://twitter.com/cubicdaiya">@cubicdaiya</a> 今の所、自分のやりたい大きな方向性からズレると色々困るのでそれはできません。もしご自身のやりたい事が明確にあるのであればforkするかngx_mrubyとは別のプロジェクト名でやられてはどうでしょうか。色々とやる事があって時間が取れてない状況ですので。</p>&mdash; MATSUMOTO, Ryosuke (@matsumotory) <a href="https://twitter.com/matsumotory/statuses/360445389893140480">July 25, 2013</a></blockquote>


<script async src="http://cubicdaiya.github.io/blog/ja//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p><a href="https://twitter.com/cubicdaiya">@cubicdaiya</a> はい、そのお気持ちはとても良く伝わってきていますし、助かっています。ただ、mod_mrubyやその他の支援機構の記述とうまく合わせようとすると色々考えないといけない事があるのと、</p>&mdash; MATSUMOTO, Ryosuke (@matsumotory) <a href="https://twitter.com/matsumotory/statuses/360450943722074112">July 25, 2013</a></blockquote>


<script async src="http://cubicdaiya.github.io/blog/ja//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p><a href="https://twitter.com/cubicdaiya">@cubicdaiya</a> 並行して論文も書いていかないといけないので、難しい所です。nginx単体への対応であればさっさと実装して終わらせるのですが。後はこの統一的支援機構という思想は学術研究として大きな柱なので、ここがぶれないように少し長い目で進めていく必要があると思っています。</p>&mdash; MATSUMOTO, Ryosuke (@matsumotory) <a href="https://twitter.com/matsumotory/statuses/360451548440047617">July 25, 2013</a></blockquote>


<script async src="http://cubicdaiya.github.io/blog/ja//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p><a href="https://twitter.com/cubicdaiya">@cubicdaiya</a> ですので、これまでのバッチを拝見していると、できるだけngx-lua-moduleに合わせた仕様にしているようにも思えますので、luaに近い仕様で別名プロジェクトとしてやって頂いても構いません。そちらの方が使いやすいと考える人も多いと思います。</p>&mdash; MATSUMOTO, Ryosuke (@matsumotory) <a href="https://twitter.com/matsumotory/statuses/360452360193052672">July 25, 2013</a></blockquote>


<script async src="http://cubicdaiya.github.io/blog/ja//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p><a href="https://twitter.com/matsumotory">@matsumotory</a> いえいえ。</p>&mdash; bokko (@cubicdaiya) <a href="https://twitter.com/cubicdaiya/statuses/360456174254030849">July 25, 2013</a></blockquote>


<script async src="http://cubicdaiya.github.io/blog/ja//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>という感じで元々結構な頻度でPull-Requestを送ってたのはいいんですが、ngx_mrubyではとにかくやりたいことがたくさんあって
開発のスピードを加速させたいこともあり、思い切ってCollaboratorへの追加をお願いしてみたところ上記のようなやりとりになりました。
僕自身forkはメリットよりもデメリットの方が大きいと思っているのでなかなか踏み切れなかったのですが、
<a href="https://twitter.com/matsumotory">@matsumotor</a>氏のススメもあり、forkすることにしました。
当面の目標は<a href="https://github.com/cubicdaiya/mruby_nginx_module">mruby-nginx-module</a>を<a href="https://github.com/chaoslawful/lua-nginx-module">lua-nginx-module</a>のように実運用に耐えうるレベルにまで持っていくことになります。</p>

<p>というわけで今後は<a href="https://github.com/cubicdaiya/mruby_nginx_module">mruby_nginx_module</a>の方に注力していく予定ですが、<a href="https://github.com/cubicdaiya/mruby_nginx_module">ngx_mruby</a>の方にもたまにコントリビュートするかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ngx_small_light v0.4.0]]></title>
    <link href="http://cubicdaiya.github.io/blog/ja/blog/2013/07/27/ngx-small-light-0-4-0/"/>
    <updated>2013-07-27T02:39:00+09:00</updated>
    <id>http://cubicdaiya.github.io/blog/ja/blog/2013/07/27/ngx-small-light-0-4-0</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/cubicdaiya/ngx_small_light">https://github.com/cubicdaiya/ngx_small_light</a></p>

<p>一昨日になりますが、ngx_small_light v0.4.0をリリースしました。変更内容は以下の３つです。</p>

<ul>
<li>e=imlib2が指定されている場合にアクセスが集中すると時々Imlib2が画像データのファイル書き出しに失敗する</li>
<li>e=imlib2,jpeghint=yが指定されている&amp;存在しないリソースにアクセスされた場合にファイルディスクリプタがリークする問題の修正</li>
<li>angleパラメータの追加</li>
</ul>


<p>バグ修正はまぁ書いてる通りですが、今回の目玉は最後のangleパラメータの追加です。ngx_small_lightには元々画像を回転させる機能がなかったのですが、
<a href="http://wiki.nginx.org/HttpImageFilterModule">ImageFilter</a>に搭載されていたので対抗意識(?)を燃やして追加してみました。</p>

<p>ngx_small_lightはサムネイルの生成に使う画像変換エンジンをImageMagick、Imlib2、GDの３つから選ぶことができるのですが、画像を回転させる機能を作るにあたってそれぞれの画像変換ライブラリの作法に従って書かなければいけないのでこれが中々大変でした。以下は各画像ライブラリで画像を回転させるコードをngx_small_lightから抜粋したものです。</p>

<h2>ImageMagick</h2>

<p>まずはImageMagick。これが一番簡単でした。インターフェースがシンプルで直感的です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if (sz.angle) {
</span><span class='line'>    PixelWand  *bg_color;
</span><span class='line'>    bg_color = NewPixelWand();
</span><span class='line'>    PixelSetRed(bg_color,   sz.cc.r / 255.0);
</span><span class='line'>    PixelSetGreen(bg_color, sz.cc.g / 255.0);
</span><span class='line'>    PixelSetBlue(bg_color,  sz.cc.b / 255.0);
</span><span class='line'>    PixelSetAlpha(bg_color, sz.cc.a / 255.0);
</span><span class='line'>
</span><span class='line'>    switch (sz.angle) {
</span><span class='line'>    case 90:
</span><span class='line'>    case 180:
</span><span class='line'>    case 270:
</span><span class='line'>        MagickRotateImage(ictx-&gt;wand, bg_color, sz.angle);
</span><span class='line'>        break;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    DestroyPixelWand(bg_color);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Imlib2</h2>

<p>続いてImlib2。コード量自体はImageMagickよりも少ないですが、実はこのコードに辿り着くのに一番時間がかかりました。
当初imlib_create_rotated_imageを使ってやろうとしてうまく行かず数時間ハマったためです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if (sz.angle == 90 || sz.angle == 180 || sz.angle == 270) {
</span><span class='line'>    ngx_int_t t;
</span><span class='line'>    imlib_context_set_image(image_dst);
</span><span class='line'>    switch(sz.angle) {
</span><span class='line'>    case 90:
</span><span class='line'>        imlib_image_orientate(1);
</span><span class='line'>        break;
</span><span class='line'>    case 180:
</span><span class='line'>        imlib_image_orientate(2);
</span><span class='line'>        break;
</span><span class='line'>    case 270:
</span><span class='line'>        imlib_image_orientate(3);
</span><span class='line'>        break;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    t     = sz.dw;
</span><span class='line'>    sz.dw = sz.dh;
</span><span class='line'>    sz.dh = t;
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>GD</h2>

<p>GDはなんかもう「どうしてこうなった」とつぶやかずにはいられなかったです。とりあえずこれを見てくれ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if (sz.angle) {
</span><span class='line'>    ngx_int_t ax, ay, ox, oy, t;
</span><span class='line'>    src = dst;
</span><span class='line'>    ax  = ((ngx_int_t)sz.dw % 2 == 0) ? 1 : 0;
</span><span class='line'>    ay  = ((ngx_int_t)sz.dh % 2 == 0) ? 1 : 0;
</span><span class='line'>    switch (sz.angle) {
</span><span class='line'>    case 90:
</span><span class='line'>    case 270:
</span><span class='line'>        dst = ngx_http_small_light_gd_new(sz.dh, sz.dw, palette);
</span><span class='line'>        if (dst == NULL) {
</span><span class='line'>            gdImageDestroy(src);
</span><span class='line'>            return NGX_ERROR;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        if (sz.angle == 90) {
</span><span class='line'>            ox = sz.dh / 2 - ay;
</span><span class='line'>            oy = sz.dw / 2 + ax;
</span><span class='line'>        } else {
</span><span class='line'>            ox = sz.dh / 2 + ay;
</span><span class='line'>            oy = sz.dw / 2 - ax;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        gdImageCopyRotated(dst, src, ox, oy, 0, 0,
</span><span class='line'>                           sz.dw, sz.dh, -sz.angle);
</span><span class='line'>        gdImageDestroy(src);
</span><span class='line'>
</span><span class='line'>        t     = sz.dw;
</span><span class='line'>        sz.dw = sz.dh;
</span><span class='line'>        sz.dh = t;
</span><span class='line'>        break;
</span><span class='line'>    case 180:
</span><span class='line'>        dst = ngx_http_small_light_gd_new(sz.dw, sz.dh, palette);
</span><span class='line'>        if (dst == NULL) {
</span><span class='line'>            gdImageDestroy(src);
</span><span class='line'>            return NGX_ERROR;
</span><span class='line'>        }
</span><span class='line'>        gdImageCopyRotated(dst, src, sz.dw / 2 - ax, sz.dh / 2 - ay, 0, 0,
</span><span class='line'>                           sz.dw + ax, sz.dh + ay, sz.angle);
</span><span class='line'>        gdImageDestroy(src);
</span><span class='line'>        break;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>引数が非常に多い上に回転後の補正処理なんかも行わないといけないのでこれも中々大変です。</p>

<p>とまぁ、そんな感じでngx_small_lightに画像回転の機能を付けた時の話でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php-ext-zopfliでPNG画像を再圧縮]]></title>
    <link href="http://cubicdaiya.github.io/blog/ja/blog/2013/03/21/zopfli-png-recompress/"/>
    <updated>2013-03-21T01:46:00+09:00</updated>
    <id>http://cubicdaiya.github.io/blog/ja/blog/2013/03/21/zopfli-png-recompress</id>
    <content type="html"><![CDATA[<p><a href="http://bit.ly/10dICrU">php-ext-zopfli</a></p>

<p>先月末から話題の<a href="https://code.google.com/p/zopfli/">zopfli</a>を使ってPNG画像を再圧縮するコードを書いてみた。
ただ、単にPNG画像を再圧縮するだけの関数をCで書いてgithubとかにあげるよりも何かしらのLLのバインディングに組み込む方が実用的だろうと思って
既にリリースされている<a href="https://github.com/kjdev/php-ext-zopfli">php-ext-zopfli</a>にzopfli_png_recompressという関数を組み込む形で実装。使い方はこんな感じ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$png_image</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="s2">&quot;/home/bokko/image.png&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$png_image_recompressed</span> <span class="o">=</span> <span class="nx">zopfli_png_recompress</span><span class="p">(</span><span class="nv">$png_image</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>PNG画像はIDATチャンク(画像の実データ部)がgzip圧縮されているので、この部分を解凍 -> <a href="https://code.google.com/p/zopfli/">zopfli</a>で再圧縮することでサイズをさらに小さくすることができる。
しかし、<a href="https://code.google.com/p/zopfli/">zopfli</a>はあくまでdeflate互換の圧縮アルゴリズムの実装を提供しているだけなので
PNG画像を解析してIDATチャンクを取り出し、解凍&amp;再圧縮してチャンクやヘッダを書き換えるするコードは自分で書かなければならない。</p>

<p>というわけでzopfliでPNG画像の再圧縮を行うのが簡単にできるようになった。<a href="http://bit.ly/Z4JtIO">Googleの元の発表</a>にもある通り、
圧縮にかかるコストがかなり大きいので事前に圧縮した形で配布するような用途以外に使うのは難しいが、zlibと比べて3～8%も小さくできるのは大きい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webサービス開発徹底攻略]]></title>
    <link href="http://cubicdaiya.github.io/blog/ja/blog/2013/01/26/web-service-dev-fall/"/>
    <updated>2013-01-26T12:36:00+09:00</updated>
    <id>http://cubicdaiya.github.io/blog/ja/blog/2013/01/26/web-service-dev-fall</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774154881/bokko0c-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51AvoWNkeqL._SL160_.jpg" alt="Webサービス開発徹底攻略 (WEB+DB PRESS plus)" style="border: none;" /></a></p>

<p>一昨年に執筆させていただいた「pixivが明かす段階的サービス拡張」という特集記事が再録された「Webサービス開発徹底攻略」が本日発売されました。
再録記事は若干修正されている箇所もありますが、基本的には当時の内容そのままの形で収録されています。</p>

<p>また、執筆当時から現在に至るまでのpixivの変遷について急ぎ足ではありますが3ページほど僕が新規に書き下ろした記事も収録されています。
興味がある方はお手に取ってお読みください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx moduleをつくろう その1〜Hello, World〜]]></title>
    <link href="http://cubicdaiya.github.io/blog/ja/blog/2013/01/08/nginx1/"/>
    <updated>2013-01-08T01:49:00+09:00</updated>
    <id>http://cubicdaiya.github.io/blog/ja/blog/2013/01/08/nginx1</id>
    <content type="html"><![CDATA[<p>ここのところ、よくnginxのモジュールを開発してたりするので個人的なメモも兼ねてnginxの開発方法や勘所的なものを紹介していこうかと思います。</p>

<p>で、まずは定番のHello, Worldから。ソースコードはgithubにあります。</p>

<p><a href="https://github.com/cubicdaiya/ngx_http_hello_world">ngx_http_hello_world</a>〜Hello, World with nginx〜</p>

<p>今回はとりあえず最初ということもあるので内部動作の解説は特にせず、単に以下のように「Hello, World!」を出力する上記のモジュールを
ビルド &amp; 動作確認する方法について解説します。ディレクティブの定義とかは次回以降に。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -l <span class="s2">&quot;http://127.0.0.1:80/hello_world&quot;</span>
</span><span class='line'>&lt;!DOCTYPE html&gt;
</span><span class='line'>&lt;html&gt;
</span><span class='line'>&lt;head&gt;
</span><span class='line'>&lt;title&gt;Hello, World with nginx!&lt;/title&gt;
</span><span class='line'>&lt;/head&gt;
</span><span class='line'>&lt;body&gt;
</span><span class='line'>&lt;p&gt;Hello, World!&lt;/p&gt;&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<h1>nginxモジュールのビルド</h1>

<p>nginxのモジュールはApacheと違って動的モジュールがサポートされていないので、nginx本体と一緒にビルドして静的に組み込む必要があります。
なのでまずはnginxnのソースコードを取ってきてアーカイブを展開しましょう。2013年1月時点の最新版(安定版)は1.2.6です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wget http://nginx.org/download/nginx-1.2.6.tar.gz
</span><span class='line'><span class="nv">$ </span>tar zxvf nginx-1.2.6.tar.gz
</span></code></pre></td></tr></table></div></figure>


<p>次に拙作のngx_http_hello_worldモジュールをgithubから落としてきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git clone git://github.com/cubicdaiya/ngx_http_hello_world.git
</span></code></pre></td></tr></table></div></figure>


<p>準備ができたのでnginx本体と一緒にビルド&amp;インストールします。組み込むモジュールはconfigure実行時に&#8211;add-moduleで指定することができます。(変数名は適宜環境に合った値を入れてください)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> <span class="k">${</span><span class="nv">nginx_src_dir</span><span class="k">}</span>
</span><span class='line'><span class="nv">$ </span>./configure --with-pcre --add-module<span class="o">=</span><span class="k">${</span><span class="nv">ngx_http_hello_world_dir</span><span class="k">}</span>
</span><span class='line'><span class="nv">$ </span>make
</span><span class='line'><span class="nv">$ </span>sudo make install
</span></code></pre></td></tr></table></div></figure>


<p>ビルド &amp; インストールができたら設定ファイルの適当な箇所に以下の設定を記述します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>location ~ /hello_world<span class="nv">$ </span><span class="o">{</span>
</span><span class='line'>    hello_world;
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでURLのパスがhello_worldに一致した場合、hellow_worldディレクティブが有効になり、nginxが以下のようにレスポンスを返してくれます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -l <span class="s2">&quot;http://127.0.0.1:80/hello_world&quot;</span>
</span><span class='line'>&lt;!DOCTYPE html&gt;
</span><span class='line'>&lt;html&gt;
</span><span class='line'>&lt;head&gt;
</span><span class='line'>&lt;title&gt;Hello, World with nginx!&lt;/title&gt;
</span><span class='line'>&lt;/head&gt;
</span><span class='line'>&lt;body&gt;
</span><span class='line'>&lt;p&gt;Hello, World!&lt;/p&gt;&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>ngx_http_hello_world自体は非常に短い単純なソースコードになっているので、Cを書いたことのある人ならとりあえず上記の実行結果の確認に加えて
これを読むだけでなんとなく雰囲気はつかめるのではないかと思います。また、Apacheモジュールを書いたことのある人なら割とすんなり入れるでしょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[libngxcore〜nginxのコアAPIをライブラリ化する〜]]></title>
    <link href="http://cubicdaiya.github.io/blog/ja/blog/2013/01/05/libngxcore/"/>
    <updated>2013-01-05T21:06:00+09:00</updated>
    <id>http://cubicdaiya.github.io/blog/ja/blog/2013/01/05/libngxcore</id>
    <content type="html"><![CDATA[<p>nginxの拡張モジュールを作ってると必然的にnginx内部のコアAPIを使ってプログラムを書くことになるのですが、
各APIの挙動を確認したりする際に毎回nginxと一緒にビルドしなければいけなくてこれが中々面倒です。</p>

<p>ApacheだとAPIがAPR(Apache Portable Runtime)というライブラリにまとめられてApache本体とは切り離されているので、
Apache以外のプログラムでもApacheのAPIを使って開発することができます。Subversionなんかはこれの良い例です。</p>

<p>そこでnginxのコアAPIもnginx以外のプログラムでも使えるようにしてメモリプールや文字列APIまわりの挙動をサクっと確認したいなぁと思ってやってみました。</p>

<p><a href="https://github.com/cubicdaiya/libngxcore">libngxcore</a>〜libngxcore is the library builded from nginx core APIs.〜</p>

<p>あくまでAPIの挙動確認が主な目的なのでこのライブラリをnginxの外でも広く使っていこうというわけではありません。
というのもAPIの充実度で言うとnginxよりもApacheというかAPRの方に分があるからです。</p>

<h1>Let&#8217;s try libngxcore</h1>

<p>nginxの文字列関連のAPIはこんな感じで呼び出せます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;ngx_core.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;ngx_string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ngx_str_t</span> <span class="n">s</span> <span class="o">=</span> <span class="n">ngx_string</span><span class="p">(</span><span class="s">&quot;bokko&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;s            :%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>  <span class="n">s</span><span class="p">.</span><span class="n">data</span><span class="p">);</span>             <span class="c1">// bokko</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;ngx_strlen(s):%ld</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">ngx_strlen</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">data</span><span class="p">));</span> <span class="c1">// 5</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>メモリプールはこんな感じ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;ngx_core.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;ngx_palloc.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;ngx_string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ngx_str_t</span> <span class="n">s</span> <span class="o">=</span> <span class="n">ngx_string</span><span class="p">(</span><span class="s">&quot;bokko&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">sp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">ngx_pool_t</span> <span class="o">*</span><span class="n">pool</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pool</span> <span class="o">=</span> <span class="n">ngx_create_pool</span><span class="p">(</span><span class="mi">4096</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="n">len</span>  <span class="o">=</span> <span class="n">ngx_strlen</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sp</span> <span class="o">=</span> <span class="n">ngx_palloc</span><span class="p">(</span><span class="n">pool</span><span class="p">,</span> <span class="n">len</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">sp</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;alloc failed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">NGX_ERROR</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ngx_cpystrn</span><span class="p">(</span><span class="n">sp</span><span class="p">,</span> <span class="n">s</span><span class="p">.</span><span class="n">data</span><span class="p">,</span> <span class="n">len</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;sp            :%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>  <span class="n">sp</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;ngx_strlen(sp):%ld</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">ngx_strlen</span><span class="p">(</span><span class="n">sp</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ngx_destroy_pool</span><span class="p">(</span><span class="n">pool</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WEB+DB PRESS vol.72]]></title>
    <link href="http://cubicdaiya.github.io/blog/ja/blog/2012/12/30/nginx72/"/>
    <updated>2012-12-30T17:07:00+09:00</updated>
    <id>http://cubicdaiya.github.io/blog/ja/blog/2012/12/30/nginx72</id>
    <content type="html"><![CDATA[<p><a href="http://gihyo.jp/magazine/wdpress/archive/2013/vol72"><img src="http://cubicdaiya.github.io/blog/ja/images/nginx72.jpg" width="300" height="300"></a></p>

<p>一週間ほど前にWEB+DB PRESS vol.73が発売なりましたが、同僚二人(うち一人は元)とnginxの特集記事を執筆しました。
僕がnginxを最初に触ったのは3年くらい前の2009年でその頃はまだバージョンも古く、0.6.xか0.8xあたりを使っていたと思います。
その頃に当時在籍していた会社の技術ブログに書いたnginxの紹介記事が<a href="http://unoh.github.com/2009/08/18/tips_for_nginx.html">こちら</a>(アーカイブです)。</p>

<p>その後、組み込み系の会社に移って1年後ぐらいに再びWeb屋さんの世界に戻るべく、pixivに入社しました。
それから約2年が経ち、pixivで元々Apacheで構築されていたコンポーネントはほぼnginxに置き換えられています。
本特集には実運用の経験から得られたTipsがふんだんに盛り込まれているので、非常にオススメできる内容になっていると思いますので、
興味のあることはご覧ください。</p>

<h2>その他の話題</h2>

<p>個人的に今月号で参考になったのはやはりコードレビュー特集でしょうか。
僕自身今年に入ってからコードレビューを依頼されたり、する必要に迫られる場面が非常に増えたので
どうやったら効率的にできるか模索しています。とりあえずツールの導入から始めたいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新卒(?)入社した会社の話]]></title>
    <link href="http://cubicdaiya.github.io/blog/ja/blog/2012/11/06/unoh-days/"/>
    <updated>2012-11-06T01:00:00+09:00</updated>
    <id>http://cubicdaiya.github.io/blog/ja/blog/2012/11/06/unoh-days</id>
    <content type="html"><![CDATA[<p>この記事は、<a href="http://atnd.org/events/33478">Unoh Advent Calendar</a>の参加記事です。</p>

<h2>はじめに</h2>

<p>昔々ウノウという会社がありました。僕が新卒(?)入社した会社です。(※)</p>

<p>まぁ、とはいえ元々少人数のベンチャー企業なので新卒などという概念はないに等しく、扱い的にはちょっと生意気で世間知らずな若い中途、ぐらいのものだったように思います。
実際新人研修なんてものは存在せず入社して2日目には映画生活のsvnリポジトリにコミットしてその後もひたすらPHPでプログラムを書いていました(1日目はPCセットアップ)。
また、面接もスーツではなく私服で行ったのを覚えています。ちなみにその時の面接を再現した記事が<a href="http://rikunabi-next.yahoo.co.jp/tech/docs/ct_s03600.jsp?p=001467">こちら</a>にあります。</p>

<p>※ 実を言うと入社したのは7月の半ばでまだ大学を卒業していなかった</p>

<h2>ウノウという会社</h2>

<p>当時(2007年)の僕は<a href="http://ssl.ohmsha.co.jp/cgi-bin/menu.cgi?ISBN=4-274-06630-4">Joel On Software</a>や
<a href="http://ssl.ohmsha.co.jp/cgi-bin/menu.cgi?ISBN=4-274-06597-9">ハッカーと画家</a>を読んでいて、就職するならこれらの本に出てくるような思想(エンジニア中心)の会社に入社したいと思っていました。
この頃の僕は大学で時間を持て余していたこともあってとっととプログラマになって働こうと思っていて、そんな時にたまたま技術ブログが目に止まったことで興味を持ったのがウノウでした。
僕が入社した時のウノウはフリーアドレス、希望するノートPCの支給(もちろんOSは自由)、デュアルディスプレイ、エンジニアが技術情報を発信できるブログ(ウノウラボ)、
毎週木曜日に開催される社内勉強会、ペアプログラミングといった制度があり、<strong>始業時間である朝の10時に出社しても誰もいない(！)のが珍しくない</strong>とてもおもしろい会社でした。</p>

<h2>アプリケーションとインフラの二足のわらじ</h2>

<p>入社してから半年くらいはWebアプリケーションの開発しかしていませんでしたが、ある時インフラエンジニアが足りないので社内のサーバやネットワークの管理をやってほしいと
CTOに頼まれてそれがきっかけでインフラにも関わるようになりました。ちなみに何で僕だったのかと言うと社員の中で一番CUIに慣れてるとかそんな理由だった気がします。
正直BIND？Postfix？何それ？な状態でのスタートだったので相当苦労しましたが、オライリー本(<a href="http://www.oreilly.co.jp/books/9784873113906/">これ</a>と
<a href="http://www.oreilly.co.jp/books/4873111951/">これ</a>)のおかげでなんとかやっていけました。ほかにもsvnリポジトリのバックアップ管理やHyperEstraierによる社内Wikiの検索高速化など、
一見地味ながらもエンジニアに喜ばれそうなことをやったりしていました。今でも僕は開発とインフラの両方に関わっていますが、このへんでの経験が非常に生きていると思っています。</p>

<h2>フォト蔵の思い出</h2>

<p>さっき書いたのは社内のインフラ業務ですが、ウノウが提供するWebサービスのインフラにもいくつか関わっていました。
中でも<a href="http://photozou.jp/">フォト蔵</a>は特に思い出深いサービスです。当時ウノウが提供するWebサービスの中では最も規模が大きいサービスでした。
正直数えきれないほどの失敗をしましたし、うまくいかなかったこともたくさんありますが、いい経験をさせてもらいました。</p>

<p>昼夜逆転した生活を送りながら数十TBの画像データを商用ストレージに移行したり、
当時3万円した2TBのHDDを大量に使った分散ストレージを実現するためにApacheモジュールを
数日で書いて投入したのも今となってはいい思い出です。当時は時間がなかったのに加えてApacheモジュールを書いたこともなくて(そもそもC言語書けるエンジニアが当時僕とCTOしかいなかった、確か)、
画像ストレージのホストが増える度にモジュールを再コンパイルしなければならないくらい拡張性が無かったり、
Apacheモジュールなのにapr使わずに標準関数でゴリゴリ書いてたり、と正直あまり褒められたものではありませんでしたが、
これのおかげで<a href="http://photozou.jp/">フォト蔵</a>では画像ストレージの追加が以前よりもとても簡単にできるようになりました。</p>

<p>ところで、このApacheモジュールは今でも稼働しているらしく<a href="https://twitter.com/cocoitiban">@cocoitiban</a>さんの結婚式の二次会で、現在メンテしている
<a href="https://twitter.com/rsky">@rsky</a>さんから「最近ちゃんとディレクティブで制御できるようにしたんですよ〜」と教えてもらいました。</p>

<h2>ラボブログと執筆活動</h2>

<p>ウノウと言えば<a href="http://labs.unoh.net/">ウノウラボ</a>、というかウノウラボが社名だと思っている人が結構いたくらい当時知名度の高かった所謂エンジニアブログですが、
僕も合計20本近く記事を書かせて頂きました。ラボブログを書いてよかったと思うのドキュメントを書くのが昔ほど苦ではなくなったことです。
学生の頃は作文がとても苦手でしたがラボブログを書くのはとても楽しかったし、多くのエンジニアの方に読まれることもあって自然と内容に気を使う癖が付き、結果的に文章力も向上したと思います。
またラボブログがきっかけでSoftware DesignやWEB+DB PRESSに寄稿する機会にも恵まれました。</p>

<h2>さいごに</h2>

<p>というわけでウノウにいた頃の話を書いてみました。社会人1〜2年目で何かと至らなくて関係者の方にはいろいろとご迷惑をおかけしたと思いますが、ありがとうございました。
今度機会がありましたら飲みに行きましょう。(あ、でも僕は烏龍茶で！)</p>

<p>ちなみに僕の最近の主な仕事は<a href="http://www.pixiv.net/">www.pixiv.net</a>をDebian Wheezy(7.0)で<del>動かして遊ぶ</del>動くようにすることです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[isucon#2に参加してきた]]></title>
    <link href="http://cubicdaiya.github.io/blog/ja/blog/2012/11/05/isucon-number-2nican-jia-sitekita/"/>
    <updated>2012-11-05T22:37:00+09:00</updated>
    <id>http://cubicdaiya.github.io/blog/ja/blog/2012/11/05/isucon-number-2nican-jia-sitekita</id>
    <content type="html"><![CDATA[<p>南国でぼけ〜としていた時に同僚の<a href="https://twitter.com/walf443">@walf443</a>に誘われて二つ返事で参加。チーム名は「くらげとみかん」。</p>

<p>事前にやった作戦会議ではPHP(僕用)でやるかPerl(@walf443用)でやるか前日くらいまで決まらなかったんだけど、
最終的に言語はPerlでアプリケーションの変更は<a href="https://twitter.com/walf443">@walf443</a>に任せて
僕がバックエンドのミドルウェアまわりのチューニングやら調整をやることに。</p>

<p>当日やったのはまず、sshの公開鍵と秘伝の.dotfilesを全サーバへコピー。そしてiptablesをオフる。(SELinuxは切ろうと思ったら既に無効になってた)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chkconfig iptables off</span></code></pre></td></tr></table></div></figure>


<p>次にリバースプロキシのサーバをApache(MPMはprefork)からnginxへ切り替え。
しかし、パフォーマンスが大して良くならないどころかむしろ悪くなってるように見えた(断定しない理由は後述)ので結局Apacheに戻す。
このあたりは納得がいかなくて細かいパラメータの変更をかなり試していたんですが、それでかなり時間をロスしてしまいました。
今思うと開始当初は完全にDBがボトルネックだったので、その段階ではリバースプロキシ側ではApacheのMPMをpreforkからworkerに変更するくらいで切り上げて
さっさとDBのボトルネック特定やパラメータのチューニング作業に移るべきでした。そっちが一段落してからリバースプロキシ側のチューニングを行えば
違った結果になったかな、と思っています。実際、DBのチューニングがある程度進んだ段階でMPMをworkerに切り替えるとチケットの販売数が倍に上昇しました。
また、ルールを勘違いしていたところがあって、isucon#2ではスコアは小さければ小さいほど良いのですが、
「チューニングしたはずなのになんでスコア下がってるんだ？」と見当違いなことを言ったりして、開始してから2時間近く間違いに気づいてませんでしたorz。</p>

<p>結局上記のことで時間を浪費し過ぎてしまってあとはMySQLのパラメータ(query_cache_size, slow_query_log, etc)をちょこちょこっといじったり、
CSSやJS、画像などの静的ファイルが後段のアプリケーションサーバから配信されていたので、これらをリバースプロキシ側へ移動してそこから返すように変更するくらいしか
できませんでした。このあたりは初参加で勝手が分からずあたふたしていたとはいえ、<a href="https://twitter.com/walf443">@walf443</a>には申し訳ないことをしたと思っているので、
お詫びに今度なんかおごります。いや、次のisucon3で頑張ります、と言うべきなのか。
あとは最後にログを吐かないようにしたり、デバッグ用の設定を削除してたらあっという間に終了。終了2分前にベンチマークが失敗した時は焦りましたが、なんとか完走できたようです。</p>

<h1>まとめ</h1>

<p>まず個人的な反省点ですが、開始当初から局所的な細かい最適化に走りすぎました。実際のアプリケーションでもそうですが、
パフォーマンスが極端に悪い原因はある特定のコンポーネントがボトルネックになっているケースが非常に多いので、
まずはそこ(開始当初はDB)を解消することに集中して局所的な最適化は最後の最後に贅肉をそぎ落とすくらいの感覚でやるべきでした。
あるボトルネックを解消すると今度は別のボトルネックが顕在化するといった具合に、
ボトルネックとなるコンポーネントはソフトウェア(あるいはハードウェア)が改善される度にどんどん移り変わっていく傾向があります。</p>

<p>実際の開発や運用と同じように「早すぎる最適化」を避け、その都度一番効果がある対策を実行していくのが一番の近道という至極当たり前な事実を再確認した日でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPC::Asia Tokyo 2012で発表してきました]]></title>
    <link href="http://cubicdaiya.github.io/blog/ja/blog/2012/09/30/yapc-asia-tokyo-2012/"/>
    <updated>2012-09-30T06:21:00+09:00</updated>
    <id>http://cubicdaiya.github.io/blog/ja/blog/2012/09/30/yapc-asia-tokyo-2012</id>
    <content type="html"><![CDATA[<p><a href="http://yapcasia.org/2012/">YAPC::Asia Tokyo 2012</a> 1日目に本編トークとLTをしてきました。去年傍聴者として参加したとき、「やっぱり自分もなんか発表したいなぁ」と感じていたので
今回は思い切ってはじめて発表者として参加してみることにしました。かなり緊張しましたが、無事終えることができてホッとしています。
発表外の時間や懇親会でも他社のエンジニアの方といろいろと話ができてとても楽しかったです。</p>

<p>発表資料は以下になります。</p>

<h2>本編トーク：<a href="http://www.slideshare.net/cubicdaiya/pixiv-thumbnails">pixiv thumbnails</a></h2>

<iframe src="http://www.slideshare.net/slideshow/embed_code/14497793" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe>




<br />


<br />


<p>pixivにおける画像サムネイルのアップロードや生成方法について解説しました。
pixivに限らず大量の画像を扱うようなWebサービスでは何かある度に新しいサムネイルを用意するのは大変ですし、
画像を保存するのに必要なストレージのコストもバカになりません。こういった問題に対して動的サムネイルは非常に有効な手段となります。</p>

<p>また、資料内では触れていませんがpixivでは静的・動的にかかわらず画像サムネイルはNginxとApache Traffic Serverで構成された前段の画像キャッシュクラスタにキャッシュされます。
動的サムネイルはその性質上ディスク容量を消費しないかわりにCPUリソースを大量に消費するので、参照される際に活用するリソースが静的サムネイルよりも多くなります。</p>

<p>そのため、動的サムネイルを実際に導入するような場合はそのサムネイルの参照頻度を考慮したり、上述のようにキャッシュを活用してサムネイルを動的に生成するリクエストの絶対数を減らす工夫が求められるでしょう。</p>

<h2>LT：<a href="http://www.slideshare.net/cubicdaiya/ngxsmalllight-yapcasia2012">ngx_small_lightで動的サムネイル生成</a></h2>

<iframe src="http://www.slideshare.net/slideshow/embed_code/14503943" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe>




<br />


<br />


<p><a href="https://github.com/cubicdaiya/ngx_small_light">ngx_small_light</a>自体は単に僕の趣味で作ったものですが、
実用的な機能はひと通り揃ってるのでそれなりに使えるかと思います。まぁ、今のところ採用実績はないので大手を振ってオススメだよ！とまで言うのは難しいですが。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ddの途中経過を表示する]]></title>
    <link href="http://cubicdaiya.github.io/blog/ja/blog/2012/07/18/ddfalsetu-zhong-jing-guo-wobiao-shi-suru/"/>
    <updated>2012-07-18T22:43:00+09:00</updated>
    <id>http://cubicdaiya.github.io/blog/ja/blog/2012/07/18/ddfalsetu-zhong-jing-guo-wobiao-shi-suru</id>
    <content type="html"><![CDATA[<p>同じ容量のHDDやSSDをマルっとコピーする際はddを使うと効果的だ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dd <span class="k">if</span><span class="o">=</span>/dev/sda1 <span class="nv">of</span><span class="o">=</span>/dev/sdb
</span></code></pre></td></tr></table></div></figure>


<p>ディスクによっては以下のようにブロックサイズを大きめに指定すると劇的に速くなる場合がある。(デフォルトは512バイト)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dd <span class="k">if</span><span class="o">=</span>/dev/sda1 <span class="nv">of</span><span class="o">=</span>/dev/sdb <span class="nv">bs</span><span class="o">=</span>4096
</span></code></pre></td></tr></table></div></figure>


<p>これはブロック単位ではなくページ単位でデータを読み書きするSSDの場合で特に顕著。
また、試したことはないけど何年か前にWestern Digitalが従来の512バイトよりも大きいセクタサイズが4KBのHDDを出してるので、
この手のHDDもbsパラメータの値を大きめにするとかなり速くなるんじゃないかと思う。(実際の速度は自分で確かめてみてね)</p>

<h2>ddの途中経過を表示</h2>

<p>で、本題。ddはそのままだと入力先から出力先まで全部のデータを流し終わるまで何も表示しない。
イマドキのHDDならSATAでもランダムアクセスはともかくシーケンシャルアクセスはそれなりに速くて
シーケンシャルリード/ライトともに100MB/sec以上は余裕で出るので、3TBのHDD同士のコピーでも半日もかからずに完了するが、
やっぱり人間なので現在のコピーの進捗と速度は知っておきたいところだ。ddには途中経過を表示するようなコマンドラインオプションは用意されていないが、
実はddのプロセスはUSR1シグナルを受け取ると現在のコピーの進捗と速度(MB/sec)を標準エラー出力に出力する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pidof dd | xargs <span class="nb">kill</span> -USR1
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node-dtl v0.1.0リリース]]></title>
    <link href="http://cubicdaiya.github.io/blog/ja/blog/2012/06/29/xin-siibaziyonfalsenode-dot-jsdenode-dtlgarequiredekinaijian/"/>
    <updated>2012-06-29T01:10:00+09:00</updated>
    <id>http://cubicdaiya.github.io/blog/ja/blog/2012/06/29/xin-siibaziyonfalsenode-dot-jsdenode-dtlgarequiredekinaijian</id>
    <content type="html"><![CDATA[<p>npmに登録してあるnode-dtlをバージョンアップ(v0.0.9 -> v0.1.0)した。</p>

<p>特に機能追加とかしたわけではなくて、どうも比較的最近のNode.jsだとアドオンのビルド済みファイルを置くディレクトリが変更されたせいで
npmでnode-dtlをインストールしても肝心のnode-dtlをrequireできなくなっていたのを直した感じ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gd">--- a/wscript</span>
</span><span class='line'><span class="gi">+++ b/wscript</span>
</span><span class='line'><span class="gu">@@ -32,3 +32,5 @@ def shutdown():</span>
</span><span class='line'>   else:
</span><span class='line'>     if os.path.exists(&#39;build/default/dtl.node&#39;) and not os.path.lexists(&#39;dtl.node&#39;):
</span><span class='line'>       os.symlink(&#39;build/default/dtl.node&#39;, &#39;dtl.node&#39;)
</span><span class='line'><span class="gi">+    if os.path.exists(&#39;build/Release/dtl.node&#39;) and not os.path.lexists(&#39;dtl.node&#39;):</span>
</span><span class='line'><span class="gi">+      os.symlink(&#39;build/Release/dtl.node&#39;, &#39;dtl.node&#39;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>という具合に昔はインストールすると{$package}/build/default/にビルド済みアドオンファイルが配置されていたのに、
いつのまにか{$package}/build/Releaseに配置されるようになっていた。個人的には正直これはどうなのよ？って感じな変更なんだけど、
<a href="http://bit.ly/MVIh6m">node-ncurses</a>の作者も同じようなことを思ってるらしく、wscriptには同じような処理と共に僕の今の気持ちを代弁してくれているようなコメントが書かれていた。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">shutdown</span><span class="p">():</span>
</span><span class='line'>  <span class="c"># HACK to get ncurses_addon.node out of build directory.</span>
</span><span class='line'>  <span class="c"># better way to do this?</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">Options</span><span class="o">.</span><span class="n">commands</span><span class="p">[</span><span class="s">&#39;clean&#39;</span><span class="p">]:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">exists</span><span class="p">(</span><span class="s">&#39;ncurses_addon.node&#39;</span><span class="p">):</span> <span class="n">unlink</span><span class="p">(</span><span class="s">&#39;ncurses_addon.node&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">exists</span><span class="p">(</span><span class="s">&#39;build/Release/ncurses_addon.node&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">exists</span><span class="p">(</span><span class="s">&#39;ncurses_addon.node&#39;</span><span class="p">):</span>
</span><span class='line'>      <span class="n">symlink</span><span class="p">(</span><span class="s">&#39;build/Release/ncurses_addon.node&#39;</span><span class="p">,</span> <span class="s">&#39;ncurses_addon.node&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">exists</span><span class="p">(</span><span class="s">&#39;build/default/ncurses_addon.node&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">exists</span><span class="p">(</span><span class="s">&#39;ncurses_addon.node&#39;</span><span class="p">):</span>
</span><span class='line'>      <span class="n">symlink</span><span class="p">(</span><span class="s">&#39;build/default/ncurses_addon.node&#39;</span><span class="p">,</span> <span class="s">&#39;ncurses_addon.node&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>いやホントにさ、もっといい方法ないの？</p>
]]></content>
  </entry>
  
</feed>
